/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.hospitalmanagement;

import Objects.Patient;
import Objects.Prescription;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfTable;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author numan.kilincoglu
 */
public class PharmacyGUI extends javax.swing.JFrame {

    String TC;
    Connection conn;
    ResultSet rs;
    PreparedStatement pst;
    Prescription prescription = new Prescription();

    DefaultTableModel medicinesModel = new DefaultTableModel(new Object[][]{},
            new String[]{
                "ID", "MEDNAME", "MEDQTY", "MEDPRICE", "MEDFAB", "MEDEXP", "COMPANY", "SELLPRICE"
            }) {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    DefaultTableModel prescriptionModel = new DefaultTableModel(new Object[][]{},
            new String[]{
                "ID", "DOCTOR INFO", "PATIENT INFO", "BRANCH", "DATE", "STATUS"}) {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    DefaultTableModel medicineModel = new DefaultTableModel(new Object[][]{},
            new String[]{
                "ID", "MEDNAME", "MEDQTY", "MEDPRICE", "MEDFAB", "MEDEXP", "COMPANY", "SELLPRICE"
            }) {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    DefaultTableModel cartModel = new DefaultTableModel(new Object[][]{},
            new String[]{
                "PrescriptionID", "MEDID", "MEDNAME", "MEDQTY", "MED PRICE", "TOTAL COST"
            }) {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    /**
     * Creates new form Pharmacy
     */
    public PharmacyGUI() {
        initComponents();
        getAgentInfo();
        txt_payment.setText("0");
        tbl_medicines.setModel(medicinesModel);
        tbl_prescriptions.setModel(prescriptionModel);
        tbl_medicineList.setModel(medicineModel);
        tbl_cart.setModel(cartModel);
        getMedicinesTable();
        getPrescriptonTable();
        getMedicineList();
        txtCostListener();
        txtPaymentListener();
        displayTime();
    }

    public PharmacyGUI(String TCNO) {
        initComponents();
        this.TC = TCNO;
        getAgentInfo();
        firstAdjustments();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tab_pane = new javax.swing.JTabbedPane();
        tab_prescriptions = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_prescriptions = new javax.swing.JTable();
        btn_showPresc = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txt_prescriptSearch = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        btn_search = new javax.swing.JButton();
        btn_refreshPresc = new javax.swing.JButton();
        tab_inventory = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txt_id = new javax.swing.JTextField();
        txt_name = new javax.swing.JTextField();
        txt_price = new javax.swing.JTextField();
        spn_qty = new javax.swing.JSpinner();
        combo_company = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_medicines = new javax.swing.JTable();
        pnl_buttons = new javax.swing.JPanel();
        btn_add = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_clear = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        date_manifacture = new com.toedter.calendar.JDateChooser();
        date_expiration = new com.toedter.calendar.JDateChooser();
        jLabel17 = new javax.swing.JLabel();
        txt_sellprice = new javax.swing.JTextField();
        btn_savePDF = new javax.swing.JButton();
        tab_selling = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbl_medicineList = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        txt_prescriptid = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txt_medname = new javax.swing.JTextField();
        txt_medsellprice = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        spn_qtysell = new javax.swing.JSpinner();
        txt_searchMedicine = new javax.swing.JTextField();
        btn_searchMedicine = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbl_cart = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel19 = new javax.swing.JLabel();
        txt_totalCost = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txt_balance = new javax.swing.JTextField();
        btn_purchase = new javax.swing.JButton();
        txt_payment = new javax.swing.JFormattedTextField();
        btn_addTocart = new javax.swing.JButton();
        btn_deleteItem = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        lbl_agentName = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        lbl_date = new javax.swing.JLabel();
        lbl_hour = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pharmacy ");

        jPanel1.setBackground(new java.awt.Color(0, 122, 18));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("PHARMACY SECTION");

        tab_pane.setBackground(new java.awt.Color(255, 255, 255));
        tab_pane.setForeground(new java.awt.Color(0, 0, 0));
        tab_pane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tab_pane.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        tab_prescriptions.setBackground(new java.awt.Color(255, 255, 255));

        tbl_prescriptions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbl_prescriptions);

        btn_showPresc.setBackground(new java.awt.Color(24, 171, 10));
        btn_showPresc.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_showPresc.setForeground(new java.awt.Color(0, 0, 0));
        btn_showPresc.setText("SHOW PRESCRIPTION DETAILS");
        btn_showPresc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_showPrescActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 122, 18));
        jLabel2.setText("Search");

        txt_prescriptSearch.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_prescriptSearch.setForeground(new java.awt.Color(0, 122, 18));

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(24, 171, 10));
        jLabel11.setText("PRESCRIPTIONS");

        btn_search.setBackground(new java.awt.Color(24, 171, 1));
        btn_search.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btn_search.setForeground(new java.awt.Color(0, 0, 0));
        btn_search.setText("Search");
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        btn_refreshPresc.setBackground(new java.awt.Color(24, 171, 10));
        btn_refreshPresc.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_refreshPresc.setForeground(new java.awt.Color(0, 0, 0));
        btn_refreshPresc.setText("REFRESH");
        btn_refreshPresc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshPrescActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tab_prescriptionsLayout = new javax.swing.GroupLayout(tab_prescriptions);
        tab_prescriptions.setLayout(tab_prescriptionsLayout);
        tab_prescriptionsLayout.setHorizontalGroup(
            tab_prescriptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_prescriptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
                .addGroup(tab_prescriptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_prescriptionsLayout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jLabel2)
                        .addGap(124, 124, 124))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_prescriptionsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab_prescriptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_prescriptSearch)
                            .addComponent(btn_showPresc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_refreshPresc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(37, 37, 37))))
            .addGroup(tab_prescriptionsLayout.createSequentialGroup()
                .addGap(350, 350, 350)
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tab_prescriptionsLayout.setVerticalGroup(
            tab_prescriptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_prescriptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(tab_prescriptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_prescriptionsLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(tab_prescriptionsLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_prescriptSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_search)
                        .addGap(103, 103, 103)
                        .addComponent(btn_showPresc, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_refreshPresc, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(125, 125, 125))))
        );

        tab_pane.addTab("PRESCRIPTIONS", tab_prescriptions);

        tab_inventory.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(24, 171, 10));
        jLabel3.setText("ID:");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(24, 171, 10));
        jLabel4.setText("MEDNAME:");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(24, 171, 10));
        jLabel5.setText("PRICE:");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(24, 171, 10));
        jLabel6.setText("DATE OF MANIFACTURE:");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(24, 171, 10));
        jLabel7.setText("EXPIRATION DATE:");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(24, 171, 10));
        jLabel8.setText("COMPANY:");

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(24, 171, 10));
        jLabel9.setText("QUANTITY:");

        txt_id.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_id.setForeground(new java.awt.Color(24, 171, 10));
        txt_id.setEnabled(false);

        txt_name.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_name.setForeground(new java.awt.Color(24, 171, 10));

        txt_price.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_price.setForeground(new java.awt.Color(24, 171, 10));
        txt_price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_priceKeyTyped(evt);
            }
        });

        spn_qty.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        spn_qty.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        combo_company.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        combo_company.setForeground(new java.awt.Color(24, 171, 10));
        combo_company.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Johnson & Johnson", "Pfizer", "Novartis", "Sanofi", "Bayer", "Abdiİbrahim", "Eczacıbaşı" }));

        jSeparator1.setBackground(new java.awt.Color(24, 171, 10));
        jSeparator1.setForeground(new java.awt.Color(24, 171, 10));

        tbl_medicines.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        tbl_medicines.setForeground(new java.awt.Color(24, 171, 10));
        tbl_medicines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbl_medicines.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbl_medicinesMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_medicines);

        pnl_buttons.setBackground(new java.awt.Color(255, 255, 255));

        btn_add.setBackground(new java.awt.Color(24, 171, 10));
        btn_add.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_add.setForeground(new java.awt.Color(255, 255, 255));
        btn_add.setText("ADD");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_update.setBackground(new java.awt.Color(24, 171, 10));
        btn_update.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_update.setForeground(new java.awt.Color(255, 255, 255));
        btn_update.setText("UPDATE");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_delete.setBackground(new java.awt.Color(24, 171, 10));
        btn_delete.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_delete.setForeground(new java.awt.Color(255, 255, 255));
        btn_delete.setText("DELETE");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_clear.setBackground(new java.awt.Color(24, 171, 10));
        btn_clear.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_clear.setForeground(new java.awt.Color(255, 255, 255));
        btn_clear.setText("CLEAR");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_buttonsLayout = new javax.swing.GroupLayout(pnl_buttons);
        pnl_buttons.setLayout(pnl_buttonsLayout);
        pnl_buttonsLayout.setHorizontalGroup(
            pnl_buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_buttonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_buttonsLayout.setVerticalGroup(
            pnl_buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_buttonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(24, 171, 10));
        jLabel10.setText("MEDICINES TABLE");

        date_manifacture.setForeground(new java.awt.Color(24, 171, 10));
        date_manifacture.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        date_expiration.setForeground(new java.awt.Color(24, 171, 10));
        date_expiration.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jLabel17.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(24, 171, 10));
        jLabel17.setText("SELLING PRICE:");

        txt_sellprice.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_sellprice.setForeground(new java.awt.Color(24, 171, 10));
        txt_sellprice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_sellpriceKeyTyped(evt);
            }
        });

        btn_savePDF.setBackground(new java.awt.Color(24, 171, 10));
        btn_savePDF.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_savePDF.setForeground(new java.awt.Color(255, 255, 255));
        btn_savePDF.setText("SAVE AS PDF");
        btn_savePDF.setToolTipText("Click to display current stock.");
        btn_savePDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_savePDFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tab_inventoryLayout = new javax.swing.GroupLayout(tab_inventory);
        tab_inventory.setLayout(tab_inventoryLayout);
        tab_inventoryLayout.setHorizontalGroup(
            tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_inventoryLayout.createSequentialGroup()
                .addGap(467, 467, 467)
                .addComponent(jLabel10)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(tab_inventoryLayout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addGroup(tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(tab_inventoryLayout.createSequentialGroup()
                        .addGroup(tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tab_inventoryLayout.createSequentialGroup()
                                .addGroup(tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt_id)
                                    .addComponent(txt_price)
                                    .addComponent(spn_qty, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                                .addGap(89, 89, 89)
                                .addGroup(tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(tab_inventoryLayout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(combo_company, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(tab_inventoryLayout.createSequentialGroup()
                                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_sellprice, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(pnl_buttons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(tab_inventoryLayout.createSequentialGroup()
                                .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(89, 89, 89)
                                .addGroup(tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(date_expiration, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(date_manifacture, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 81, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(btn_savePDF, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        tab_inventoryLayout.setVerticalGroup(
            tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_inventoryLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel6)
                        .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(date_manifacture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7))
                    .addComponent(date_expiration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txt_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(combo_company, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(spn_qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(txt_sellprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnl_buttons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(tab_inventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_inventoryLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_inventoryLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_savePDF, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(119, 119, 119))))
        );

        tab_pane.addTab("INVENTORY", tab_inventory);

        tab_selling.setBackground(new java.awt.Color(255, 255, 255));

        tbl_medicineList.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        tbl_medicineList.setForeground(new java.awt.Color(24, 171, 10));
        tbl_medicineList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbl_medicineList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbl_medicineListMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tbl_medicineList);

        jLabel16.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(24, 171, 10));
        jLabel16.setText("MEDICINES LIST");

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        txt_prescriptid.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_prescriptid.setForeground(new java.awt.Color(24, 171, 10));
        txt_prescriptid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_prescriptidKeyTyped(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(24, 171, 10));
        jLabel12.setText("PRESCRIPTION ID:");

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(24, 171, 10));
        jLabel13.setText("MEDICINE NAME:");

        txt_medname.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_medname.setForeground(new java.awt.Color(24, 171, 10));
        txt_medname.setEnabled(false);

        txt_medsellprice.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_medsellprice.setForeground(new java.awt.Color(24, 171, 10));
        txt_medsellprice.setEnabled(false);

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(24, 171, 10));
        jLabel14.setText("PRICE:");

        jLabel15.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(24, 171, 10));
        jLabel15.setText("QUANTITY:");

        spn_qtysell.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        spn_qtysell.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spn_qtysell.setToolTipText("");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(99, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_medname)
                    .addComponent(txt_medsellprice)
                    .addComponent(txt_prescriptid)
                    .addComponent(spn_qtysell, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(86, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txt_prescriptid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txt_medname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txt_medsellprice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spn_qtysell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(27, 27, 27))
        );

        txt_searchMedicine.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_searchMedicine.setForeground(new java.awt.Color(24, 171, 10));

        btn_searchMedicine.setBackground(new java.awt.Color(24, 171, 10));
        btn_searchMedicine.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btn_searchMedicine.setForeground(new java.awt.Color(255, 255, 255));
        btn_searchMedicine.setText("Search");
        btn_searchMedicine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchMedicineActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        tbl_cart.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        tbl_cart.setForeground(new java.awt.Color(24, 171, 10));
        tbl_cart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(tbl_cart);

        jLabel18.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(24, 171, 10));
        jLabel18.setText("CART");

        jSeparator2.setBackground(new java.awt.Color(0, 122, 18));
        jSeparator2.setForeground(new java.awt.Color(0, 122, 18));

        jLabel19.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(24, 171, 10));
        jLabel19.setText("TOTAL COST:");

        txt_totalCost.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_totalCost.setForeground(new java.awt.Color(24, 171, 10));
        txt_totalCost.setEnabled(false);

        jLabel20.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(24, 171, 10));
        jLabel20.setText("PAYMENT:");

        jLabel21.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 122, 18));
        jLabel21.setText("ORDER SUMMARY");

        jLabel22.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(24, 171, 10));
        jLabel22.setText("BALANCE:");

        txt_balance.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_balance.setForeground(new java.awt.Color(24, 171, 10));
        txt_balance.setEnabled(false);

        btn_purchase.setBackground(new java.awt.Color(0, 122, 18));
        btn_purchase.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_purchase.setForeground(new java.awt.Color(255, 255, 255));
        btn_purchase.setText("PURCHASE");
        btn_purchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_purchaseActionPerformed(evt);
            }
        });

        txt_payment.setForeground(new java.awt.Color(24, 171, 10));
        txt_payment.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##"))));
        txt_payment.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_payment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_paymentKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                            .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_balance, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jLabel21))
                    .addComponent(btn_purchase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txt_totalCost, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel18)
                .addGap(284, 284, 284))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel18)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(txt_totalCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(txt_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_balance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(btn_purchase, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );

        btn_addTocart.setBackground(new java.awt.Color(0, 122, 18));
        btn_addTocart.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_addTocart.setForeground(new java.awt.Color(255, 255, 255));
        btn_addTocart.setText("ADD TO CART");
        btn_addTocart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addTocartActionPerformed(evt);
            }
        });

        btn_deleteItem.setBackground(new java.awt.Color(0, 122, 18));
        btn_deleteItem.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_deleteItem.setForeground(new java.awt.Color(255, 255, 255));
        btn_deleteItem.setText("DELETE FROM CART");
        btn_deleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tab_sellingLayout = new javax.swing.GroupLayout(tab_selling);
        tab_selling.setLayout(tab_sellingLayout);
        tab_sellingLayout.setHorizontalGroup(
            tab_sellingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_sellingLayout.createSequentialGroup()
                .addGroup(tab_sellingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(tab_sellingLayout.createSequentialGroup()
                        .addContainerGap(101, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tab_sellingLayout.createSequentialGroup()
                        .addGroup(tab_sellingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tab_sellingLayout.createSequentialGroup()
                                .addGap(677, 677, 677)
                                .addComponent(jLabel16))
                            .addGroup(tab_sellingLayout.createSequentialGroup()
                                .addGap(652, 652, 652)
                                .addComponent(txt_searchMedicine, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn_searchMedicine, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(tab_sellingLayout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab_sellingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(tab_sellingLayout.createSequentialGroup()
                                .addGap(127, 127, 127)
                                .addComponent(btn_addTocart, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(101, 101, 101)
                                .addComponent(btn_deleteItem)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        tab_sellingLayout.setVerticalGroup(
            tab_sellingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_sellingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab_sellingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_sellingLayout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tab_sellingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_searchMedicine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_searchMedicine))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab_sellingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_addTocart, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_deleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_sellingLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab_pane.addTab("SELLING", tab_selling);

        jLabel23.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("Agent Name: ");

        lbl_agentName.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lbl_agentName.setForeground(new java.awt.Color(255, 255, 255));

        jLabel24.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Date:");

        jLabel25.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(0, 0, 0));

        lbl_date.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lbl_date.setForeground(new java.awt.Color(255, 255, 255));

        lbl_hour.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lbl_hour.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(501, 501, 501)
                        .addComponent(jLabel1)
                        .addGap(197, 197, 197)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_agentName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(179, 179, 179)
                                .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lbl_date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_hour, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(tab_pane)))
                .addGap(32, 32, 32))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_agentName, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_date, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbl_hour, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(tab_pane)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void firstAdjustments() {
        txt_payment.setText("0");
        tbl_medicines.setModel(medicinesModel);
        tbl_prescriptions.setModel(prescriptionModel);
        tbl_medicineList.setModel(medicineModel);
        tbl_cart.setModel(cartModel);
        getMedicinesTable();
        getPrescriptonTable();
        getMedicineList();
        txtCostListener();
        txtPaymentListener();
        displayTime();

    }

    private void btn_showPrescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_showPrescActionPerformed
        if (tbl_prescriptions.getSelectedRow() != -1) {
            int testID = (int) tbl_prescriptions.getValueAt(tbl_prescriptions.getSelectedRow(), 0);
            PrescriptionGUI prescriptionfrm = new PrescriptionGUI(testID, "pharmalogin");
            prescriptionfrm.setVisible(true);
        }
    }//GEN-LAST:event_btn_showPrescActionPerformed
    public void getAgentInfo() {
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            pst = conn.prepareStatement("SELECT * FROM PHARMACISTS WHERE TCNO = ?");
            pst.setString(1, this.TC);
            rs = pst.executeQuery();
            if (rs.next()) {
                String name = rs.getString("NAME");
                String surname = rs.getString("SURNAME");
                lbl_agentName.setText(name.toUpperCase() + " " + surname.toUpperCase());
            }
        } catch (SQLException ex) {
            Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed

        boolean fieldsControl = fieldsControl();
        if (fieldsControl) {
            SimpleDateFormat fabDate = new SimpleDateFormat("dd-MM-yyyy");
            String fabdate = fabDate.format(date_manifacture.getDate());
            SimpleDateFormat expDate = new SimpleDateFormat("dd-MM-yyyy");
            String expdate = expDate.format(date_expiration.getDate());
            int id = autoID();
            txt_id.setText(Integer.toString(id));
            String price = txt_price.getText();
            int qty = (int) spn_qty.getValue();
            String name = txt_name.getText().toUpperCase();
            String company = (String) combo_company.getSelectedItem();
            String sellprice = txt_sellprice.getText();
            boolean addControl = addMedicine(id, name, qty, price, fabdate, expdate, company, sellprice);

            if (addControl) {
                JOptionPane.showMessageDialog(rootPane, "Medicine has been successfully added. ", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                medicinesModel.setRowCount(0);
                getMedicinesTable();
            } else {
                JOptionPane.showMessageDialog(rootPane, "An error occured. ", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed

        txt_id.setText("");
        txt_name.setText("");
        txt_price.setText("");
    }//GEN-LAST:event_btn_clearActionPerformed

    private void txt_priceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_priceKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c) && !evt.isAltDown()) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_priceKeyTyped

    public void displayTime() {
        new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Date date = new Date();
                SimpleDateFormat d1 = new SimpleDateFormat("hh:mm:ss");
                lbl_hour.setText(d1.format(date));
            }
        }).start();

        Date date1 = new Date();
        SimpleDateFormat s1 = new SimpleDateFormat("yyyy-MM-dd");
        lbl_date.setText(s1.format(date1));

    }

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        if (tbl_medicines.getSelectedRow() != -1) {
            int id = (int) tbl_medicines.getValueAt(tbl_medicines.getSelectedRow(), 0);
            int x = JOptionPane.showConfirmDialog(rootPane, "Are you sure?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                boolean control = deleteMedicines(id);
                if (control) {
                    JOptionPane.showMessageDialog(rootPane, "Medicine has been successfully deleted. ", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                    medicinesModel.setRowCount(0);
                    getMedicinesTable();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "An error occured. ", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        if (tbl_medicines.getSelectedRow() != -1 && fieldsControl()) {
            int id = (int) tbl_medicines.getValueAt(tbl_medicines.getSelectedRow(), 0);
            int x = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to update?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                txt_id.setText(Integer.toString(id));
                String name = txt_name.getText().toUpperCase();
                String price = txt_price.getText();
                SimpleDateFormat fabDate = new SimpleDateFormat("dd-MM-yyyy");
                String fabdate = fabDate.format(date_manifacture.getDate());
                SimpleDateFormat expDate = new SimpleDateFormat("dd-MM-yyyy");
                String expdate = expDate.format(date_expiration.getDate());
                int qty = (int) spn_qty.getValue();
                String company = (String) combo_company.getSelectedItem();

                boolean controlUpdate = updateMedicine(id, name, qty, price, fabdate, expdate, company);
                if (controlUpdate) {
                    JOptionPane.showMessageDialog(rootPane, "Medicine has been successfully updated. ", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                    medicinesModel.setRowCount(0);
                    getMedicinesTable();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "An error occured. ", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btn_updateActionPerformed

    private void tbl_medicinesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_medicinesMouseReleased
        if (tbl_medicines.getSelectedRow() != -1) {
            int id = (int) tbl_medicines.getValueAt(tbl_medicines.getSelectedRow(), 0);
            String name = (String) tbl_medicines.getValueAt(tbl_medicines.getSelectedRow(), 1);
            int qty = (int) tbl_medicines.getValueAt(tbl_medicines.getSelectedRow(), 2);
            String price = (String) tbl_medicines.getValueAt(tbl_medicines.getSelectedRow(), 3);
            String company = (String) tbl_medicines.getValueAt(tbl_medicines.getSelectedRow(), 6);
            txt_id.setText(Integer.toString(id));
            txt_name.setText(name);
            txt_price.setText(price);
            spn_qty.setValue(qty);
            combo_company.setSelectedItem(company);
        }
    }//GEN-LAST:event_tbl_medicinesMouseReleased

    private void tbl_medicineListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_medicineListMouseReleased
        if (tbl_medicineList.getSelectedRow() != -1) {
            String name = (String) tbl_medicineList.getValueAt(tbl_medicineList.getSelectedRow(), 1);
            txt_medname.setText(name);
            String price = (String) tbl_medicineList.getValueAt(tbl_medicineList.getSelectedRow(), 7);
            System.out.println(price);
            txt_medname.setText(name);
            txt_medsellprice.setText(price);
        }
    }//GEN-LAST:event_tbl_medicineListMouseReleased

    private void txt_sellpriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_sellpriceKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c) && !evt.isAltDown()) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_sellpriceKeyTyped

    private void btn_searchMedicineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchMedicineActionPerformed

        String search = txt_searchMedicine.getText();
        medicineSearch(search);

    }//GEN-LAST:event_btn_searchMedicineActionPerformed

    double sumcost = 0;
    private void btn_addTocartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addTocartActionPerformed

        boolean key = fieldControl2();
        if (key) {
            if (tbl_medicineList.getSelectedRow() != -1 && !txt_prescriptid.getText().isEmpty()) {

                String prescID = txt_prescriptid.getText();
                int medid = (int) tbl_medicineList.getValueAt(tbl_medicineList.getSelectedRow(), 0);
                String medname = (String) tbl_medicineList.getValueAt(tbl_medicineList.getSelectedRow(), 1);
                int qty = (int) spn_qtysell.getValue();

                boolean stcokControl = stockControl(medid, qty);
                if (stcokControl) {
                    String sell = (String) tbl_medicineList.getValueAt(tbl_medicineList.getSelectedRow(), 7);
                    double sellprice = Double.parseDouble(sell);
                    double total = sellprice * qty;
                    sumcost += total;
                    String totalCost = Double.toString(total);
                    String sumCost = Double.toString(sumcost);
                    txt_totalCost.setText(sumCost);
                    boolean control = false;
                    int index = 0;
                    for (int i = 0; i < tbl_cart.getRowCount(); i++) {
                        if (tbl_cart.getValueAt(i, 1) != null) {
                            if (tbl_cart.getValueAt(i, 1).equals(medid)) {
                                control = true;
                                index = i;
                            }
                        }
                    }
                    if (!control) {
                        cartModel.addRow(new Object[]{prescID, medid, medname, qty, sellprice, totalCost});
                    } else {
                        int oldqty = (int) tbl_cart.getValueAt(index, 3);
                        int nqty = oldqty + qty;
                        String oldCost = (String) tbl_cart.getValueAt(index, 5);
                        double oldCost2 = Double.parseDouble(oldCost);
                        double ncost = sellprice * nqty;
                        String totCost = Double.toString(ncost);
                        tbl_cart.setValueAt(nqty, index, 3);
                        tbl_cart.setValueAt(totCost, index, 5);
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Insufficient Stock!!", "ERROR", JOptionPane.ERROR_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(rootPane, "Please fill all required fields", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_btn_addTocartActionPerformed
    else {
            JOptionPane.showMessageDialog(rootPane, "Please fill all required fields", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void btn_deleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteItemActionPerformed
        if (tbl_cart.getSelectedRow() != -1 && !txt_totalCost.equals("")) {
            String price = (String) tbl_cart.getValueAt(tbl_cart.getSelectedRow(), 5);
            cartModel.removeRow(tbl_cart.getSelectedRow());
            double minus = Double.parseDouble(price);
            double total = Double.parseDouble(txt_totalCost.getText());
            total -= minus;
            txt_totalCost.setText(Double.toString(total));
        }
    }//GEN-LAST:event_btn_deleteItemActionPerformed

    private void txt_prescriptidKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_prescriptidKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && !evt.isAltDown()) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_prescriptidKeyTyped

    private void btn_purchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_purchaseActionPerformed

        boolean control = purchaseControl();
        if (tbl_cart.getRowCount() != 0 && control) {
            Double charge = Double.parseDouble(txt_balance.getText());
            boolean success = false;

            if (charge >= 0) {
                for (int i = 0; i < tbl_cart.getRowCount(); i++) {
                    if ((tbl_cart.getValueAt(i, 1) != null) && (tbl_cart.getValueAt(i, 3) != null)) {
                        int medid = (int) tbl_cart.getValueAt(i, 1);
                        int medqty = (int) tbl_cart.getValueAt(i, 3);

                        boolean medControl = medQtyUpdate(medid, medqty);
                        if (medControl) {
                            success = true;
                        } else {
                            success = false;
                            break;
                        }
                    }
                }
                if (success) {
                    medicineModel.setRowCount(0);
                    getMedicineList();
                    String prescriptID = txt_prescriptid.getText();
                    int id = Integer.parseInt(prescriptID);
                    boolean idControl = prescriptIDControl(id);
                    if (idControl) {

                        String totCost = txt_totalCost.getText();
                        PrescriptionGUI frm7 = new PrescriptionGUI(id, "pharmaLog", totCost);
                        frm7.setVisible(true);
                        cartModel.setRowCount(0);
                        medicinesModel.setRowCount(0);
                        getMedicinesTable();

                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Prescription not found!", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }

                } else {
                    JOptionPane.showMessageDialog(rootPane, "An error occurred while transaction.!", "ERROR", JOptionPane.ERROR_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(rootPane, "Insufficient balance!", "ERROR", JOptionPane.WARNING_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Please fill in all the required blanks!", "ERROR", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btn_purchaseActionPerformed

    public boolean prescriptIDControl(int id) {
        boolean rvalue = false;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            pst = conn.prepareStatement("SELECT * FROM PRESCRIPTIONS WHERE ID =?");
            pst.setInt(1, id);
            rs = pst.executeQuery();

            if (rs.next()) {
                conn.close();
                rvalue = true;
                return rvalue;

            }
        } catch (SQLException ex) {
            Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rvalue;
    }


    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        prescriptionSearch(txt_prescriptSearch.getText());
    }//GEN-LAST:event_btn_searchActionPerformed

    private void btn_savePDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_savePDFActionPerformed

        if (tbl_medicines.getRowCount() > 0) {
            String path = "";
            JFileChooser f = new JFileChooser();
            f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int x = f.showSaveDialog(jPanel1);
            if (x == JFileChooser.APPROVE_OPTION) {
                path = f.getSelectedFile().getPath();
                Document document = new Document();
                try {
                    String name = JOptionPane.showInputDialog(rootPane, "Please enter name for file.", "File Name", JOptionPane.INFORMATION_MESSAGE);
                    PdfWriter.getInstance(document, new FileOutputStream(path + name.concat(".pdf")));

                } catch (DocumentException | FileNotFoundException ex) {
                    Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                document.open();
                try {
                    document.add(new Paragraph("                                                                MEDICINE STOCK \n "));
                } catch (DocumentException ex) {
                    Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                PdfPTable tbl = new PdfPTable(8);
                tbl.addCell("ID");
                tbl.addCell("MEDICINE NAME");
                tbl.addCell("MEDICINE QUANTITY");
                tbl.addCell("PRICE");
                tbl.addCell("MEDICINE FABRIC DATE");
                tbl.addCell("EXPIRATION DATE");
                tbl.addCell("COMPANY NAME");
                tbl.addCell("SELL PRICE");

                for (int i = 0; i < tbl_medicines.getRowCount(); i++) {
                    String id = tbl_medicines.getValueAt(i, 0).toString();
                    String medname = tbl_medicines.getValueAt(i, 1).toString();
                    String medqty = tbl_medicines.getValueAt(i, 2).toString();
                    String price = tbl_medicines.getValueAt(i, 3).toString();
                    String medFabric = tbl_medicines.getValueAt(i, 4).toString();
                    String expDate = tbl_medicines.getValueAt(i, 5).toString();
                    String company = tbl_medicines.getValueAt(i, 6).toString();
                    String sellprice = tbl_medicines.getValueAt(i, 7).toString();

                    if (id != null) {
                        tbl.addCell(id);
                    }
                    if (medname != null) {
                        tbl.addCell(medname);
                    }
                    if (medqty != null) {
                        tbl.addCell(medqty);
                    }
                    if (price != null) {
                        tbl.addCell(price);
                    }
                    if (medFabric != null) {
                        tbl.addCell(medFabric);
                    }
                    if (expDate != null) {
                        tbl.addCell(expDate);
                    }
                    if (company != null) {
                        tbl.addCell(company);
                    }
                    if (sellprice != null) {
                        tbl.addCell(sellprice);
                    }
                }
                try {
                    document.add(tbl);

                    JOptionPane.showMessageDialog(rootPane, "Report was saved as pdf.", "SAVED", JOptionPane.WARNING_MESSAGE);
                } catch (DocumentException ex) {
                    Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

                document.close();

            } else {

            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "There is no medicine in inventory.", "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btn_savePDFActionPerformed

    private void btn_refreshPrescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshPrescActionPerformed
        prescriptionModel.setRowCount(0);
        getPrescriptonTable();
    }//GEN-LAST:event_btn_refreshPrescActionPerformed

    private void txt_paymentKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_paymentKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && !evt.isAltDown()) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_paymentKeyTyped

    public void prescriptionSearch(String search) {
        prescriptionModel.setRowCount(0);
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = "SELECT * FROM PRESCRIPTIONS WHERE UPPER(DOCTORNAME)|| LOWER(DOCTORNAME) || UPPER(PATIENTNAME) || LOWER(PATIENTNAME) || UPPER(BRANCH) || LOWER(BRANCH) || UPPER(MEDICATIONS) || LOWER(MEDICATIONS) LIKE '%" + search + "%'";
            Statement st = conn.createStatement();
            rs = st.executeQuery(query);
            while (rs.next()) {
                String status = rs.getString("STATUS");
                System.out.println(status);
                if (status != null) {
                    if (status.equals("CREATED")) {
                        int id = (rs.getInt("ID"));
                        String docName = rs.getString("DOCTORNAME");
                        String patName = rs.getString("PATIENTNAME");
                        String branch = rs.getString("BRANCH");
                        String date = rs.getString("DATE");
                        prescriptionModel.addRow(new Object[]{id, docName, patName, branch, date, status});
                    }
                }
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void txtCostListener() {
        txt_totalCost.getDocument().addDocumentListener(new DocumentListener() {
            public void warn() {
                if (!txt_totalCost.getText().isEmpty() && !txt_payment.getText().isEmpty()) {
                    Matcher matcher2 = Pattern.compile("^[0-9]*+$").matcher(txt_payment.getText());
                    if (matcher2.find()) {
                        if (Double.parseDouble(txt_totalCost.getText()) > 0) {
                            double totalcost = Double.parseDouble(txt_totalCost.getText());
                            double payment = Double.parseDouble(txt_payment.getText());
                            double sum = payment - totalcost;
                            String balance = Double.toString(sum);
                            txt_balance.setText(balance);
                        }

                    }

                }
            }

            public void changedUpdate(DocumentEvent e) {
                warn();
            }

            public void removeUpdate(DocumentEvent e) {
                warn();
            }

            public void insertUpdate(DocumentEvent e) {
                warn();
            }
        });

    }

    public void txtPaymentListener() {
        txt_payment.getDocument().addDocumentListener(new DocumentListener() {
            public void warn() {

                if (!txt_totalCost.getText().isEmpty() && !txt_payment.getText().isEmpty()) {
                    Matcher matcher = Pattern.compile("^[0-9]*+$").matcher(txt_payment.getText());

                    if (matcher.find()) {
                        if (Double.parseDouble(txt_totalCost.getText()) > 0) {
                            double totalcost = Double.parseDouble(txt_totalCost.getText());
                            double payment = Double.parseDouble(txt_payment.getText());
                            double sum = payment - totalcost;
                            String balance = Double.toString(sum);
                            txt_balance.setText(balance);
                        }
                    }

                }
            }

            public void changedUpdate(DocumentEvent e) {
                warn();
            }

            public void removeUpdate(DocumentEvent e) {
                warn();
            }

            public void insertUpdate(DocumentEvent e) {
                warn();
            }
        });

    }

    public void getMedicinesTable() {
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            pst = conn.prepareStatement("SELECT * FROM DRUGS");
            rs = pst.executeQuery();
            while (rs.next()) {
                int id = (rs.getInt("ID"));
                String name = rs.getString("NAME");
                String price = rs.getString("PRICE");
                int qty = (rs.getInt("QUANTITY"));
                String maniDate = (rs.getString("MANIFACTUREDATE"));
                String expDate = (rs.getString("EXPIRATION"));
                String company = (rs.getString("COMPANY"));
                String sellPrice = rs.getString("SELLPRICE");
                medicinesModel.addRow(new Object[]{id, name, qty, price, maniDate, expDate, company, sellPrice});
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void getMedicineList() {
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            pst = conn.prepareStatement("SELECT * FROM DRUGS");
            rs = pst.executeQuery();
            while (rs.next()) {
                int id = (rs.getInt("ID"));
                String name = rs.getString("NAME");
                String price = rs.getString("PRICE");
                int qty = (rs.getInt("QUANTITY"));
                String maniDate = (rs.getString("MANIFACTUREDATE"));
                String expDate = (rs.getString("EXPIRATION"));
                String company = (rs.getString("COMPANY"));
                String sellPrice = rs.getString("SELLPRICE");
                medicineModel.addRow(new Object[]{id, name, qty, price, maniDate, expDate, company, sellPrice});
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void medicineSearch(String search) {
        medicineModel.setRowCount(0);
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = "SELECT * FROM DRUGS WHERE NAME || COMPANY LIKE '%" + search + "%'";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id = (rs.getInt("ID"));
                String name = rs.getString("NAME");
                String price = rs.getString("PRICE");
                int qty = (rs.getInt("QUANTITY"));
                String maniDate = (rs.getString("MANIFACTUREDATE"));
                String expDate = (rs.getString("EXPIRATION"));
                String company = (rs.getString("COMPANY"));
                String sellPrice = rs.getString("SELLPRICE");
                medicineModel.addRow(new Object[]{id, name, qty, price, maniDate, expDate, company, sellPrice});
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void getPrescriptonTable() {
        ArrayList<Prescription> prescriptonList = new ArrayList<>();
        prescriptonList = prescription.pharmacyPrescriptions();
        for (int i = 0; i < prescriptonList.size(); i++) {
            if (prescriptonList.get(i) != null) {
                int id = prescriptonList.get(i).getId();
                String docName = prescriptonList.get(i).getDocName();
                String patName = prescriptonList.get(i).getPatientName();
                String branch = prescriptonList.get(i).getBranch();
                String date = prescriptonList.get(i).getDate();
                String status = prescriptonList.get(i).getStatus();
//                String medication = prescriptonList.get(i).getMedication();
//                String comment = prescriptonList.get(i).getComment();
                prescriptionModel.addRow(new Object[]{id, docName, patName, branch, date, status});
            }
        }
    }

    public boolean addMedicine(int id, String name, int qty, String price, String fabdate, String expdate, String company, String sellprice) {
        boolean rvalue = false;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            pst = conn.prepareStatement("SELECT * FROM DRUGS WHERE NAME =?");
            pst.setString(1, name);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            pst = conn.prepareStatement("INSERT INTO DRUGS VALUES(?,?,?,?,?,?,?,?)");
            pst.setInt(1, id);
            pst.setString(2, name);
            pst.setInt(3, qty);
            pst.setString(4, fabdate);
            pst.setString(5, expdate);
            pst.setString(6, company);
            pst.setString(7, price);
            pst.setString(8, sellprice);
            System.out.println(price);
            pst.executeUpdate();
            rvalue = true;
        } catch (SQLException ex) {
            Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rvalue;

    }

    public boolean deleteMedicines(int id) {
        boolean rval = false;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            pst = conn.prepareStatement("DELETE FROM DRUGS WHERE ID =?");
            pst.setInt(1, id);
            pst.executeUpdate();
            rval = true;
            return rval;
        } catch (SQLException ex) {
            Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rval;
    }

    public boolean updateMedicine(int id, String name, int qty, String price, String fabdate, String expdate, String company) {
        boolean rval = false;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            pst = conn.prepareStatement("UPDATE DRUGS SET NAME=?, QUANTITY=?, MANIFACTUREDATE=?, EXPIRATION=?,COMPANY=?,PRICE=? WHERE ID =?");
            pst.setString(1, name);
            pst.setInt(2, qty);
            pst.setString(3, fabdate);
            pst.setString(4, expdate);
            pst.setString(5, company);
            pst.setString(6, price);
            pst.setInt(7, id);
            pst.executeUpdate();
            rval = true;
            return rval;
        } catch (SQLException ex) {
            Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rval;
    }

    public boolean medQtyUpdate(int id, int qty) {
        boolean rval = false;
        conn = null;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            pst = conn.prepareStatement("SELECT * FROM DRUGS WHERE ID =?");
            pst.setInt(1, id);
            rs = pst.executeQuery();
            int totalqty = 0;
            if (rs.next()) {
                totalqty = rs.getInt("QUANTITY");

            }
            conn.close();
            int nqty = totalqty - qty;

            if (nqty >= 0) {
                conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
                pst = conn.prepareStatement("UPDATE DRUGS SET QUANTITY=? WHERE ID =?");
                pst.setInt(1, nqty);
                pst.setInt(2, id);
                pst.executeUpdate();
                rval = true;
                return rval;
            }

        } catch (SQLException ex) {
            Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rval;

    }

    private int autoID() {
        int id = 0;
        Connection conn = null;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            Statement stm = conn.createStatement();
            rs = stm.executeQuery("SELECT MAX(ID) FROM DRUGS");
            rs.next();
            rs.getInt(1);
            if (rs.getInt(1) == 0) {
                id = 1;
                return id;
            } else {
                id = (rs.getInt(1));
                id++;
                return id;
            }

        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();

            }

        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
        }

        return id;

    }

    public boolean stockControl(int id, int qty) {
        System.out.println(id + " " + qty);
        boolean rvalue = true;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            pst = conn.prepareStatement("SELECT * FROM DRUGS WHERE ID =?");
            pst.setInt(1, id);
            rs = pst.executeQuery();
            int totalqty = 0;
            if (rs.next()) {
                totalqty = rs.getInt("QUANTITY");
                System.out.println("total qty = " + totalqty);
            }
            int key = totalqty - qty;
            if (key <= 0) {
                rvalue = false;
                return rvalue;
            }
        } catch (SQLException ex) {
            Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rvalue;
    }

    private boolean fieldsControl() {
        if (txt_name.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Please fill all required blanks", "Hata", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (txt_price.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Please fill all required blanks", "Hata", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (txt_sellprice.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Please fill all required blanks", "Hata", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if ((int) spn_qty.getValue() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Please fill all required blanks", "Hata", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (date_manifacture.getDate() == null) {
            JOptionPane.showMessageDialog(rootPane, "Please fill all required blanks", "Hata", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (date_expiration.getDate() == null) {
            JOptionPane.showMessageDialog(rootPane, "Please fill all required blanks", "Hata", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (combo_company.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(rootPane, "Please fill all required blanks", "Hata", JOptionPane.ERROR_MESSAGE);
            return false;

        } else {
            return true;
        }
    }

    private boolean fieldControl2() {

        if (txt_prescriptid.getText().isEmpty()) {
            return false;
        }
        if ((int) spn_qtysell.getValue() == 0) {
            return false;
        }
        return true;

    }

    public boolean purchaseControl() {
        if (txt_prescriptid.getText().isEmpty()) {
            return false;
        }
        if (txt_totalCost.getText().isEmpty()) {
            return false;
        }
        if (txt_payment.getText().isEmpty()) {
            System.out.println(txt_payment.getText());
            return false;
        }
        if (txt_balance.getText().isEmpty()) {
            return false;
        }

        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PharmacyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PharmacyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PharmacyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PharmacyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PharmacyGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_addTocart;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_deleteItem;
    private javax.swing.JButton btn_purchase;
    private javax.swing.JButton btn_refreshPresc;
    private javax.swing.JButton btn_savePDF;
    private javax.swing.JButton btn_search;
    private javax.swing.JButton btn_searchMedicine;
    private javax.swing.JButton btn_showPresc;
    private javax.swing.JButton btn_update;
    private javax.swing.JComboBox<String> combo_company;
    private com.toedter.calendar.JDateChooser date_expiration;
    private com.toedter.calendar.JDateChooser date_manifacture;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lbl_agentName;
    private javax.swing.JLabel lbl_date;
    private javax.swing.JLabel lbl_hour;
    private javax.swing.JPanel pnl_buttons;
    private javax.swing.JSpinner spn_qty;
    private javax.swing.JSpinner spn_qtysell;
    private javax.swing.JPanel tab_inventory;
    private javax.swing.JTabbedPane tab_pane;
    private javax.swing.JPanel tab_prescriptions;
    private javax.swing.JPanel tab_selling;
    private javax.swing.JTable tbl_cart;
    private javax.swing.JTable tbl_medicineList;
    private javax.swing.JTable tbl_medicines;
    private javax.swing.JTable tbl_prescriptions;
    private javax.swing.JTextField txt_balance;
    private javax.swing.JTextField txt_id;
    private javax.swing.JTextField txt_medname;
    private javax.swing.JTextField txt_medsellprice;
    private javax.swing.JTextField txt_name;
    private javax.swing.JFormattedTextField txt_payment;
    private javax.swing.JTextField txt_prescriptSearch;
    private javax.swing.JTextField txt_prescriptid;
    private javax.swing.JTextField txt_price;
    private javax.swing.JTextField txt_searchMedicine;
    private javax.swing.JTextField txt_sellprice;
    private javax.swing.JTextField txt_totalCost;
    // End of variables declaration//GEN-END:variables
}
