/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.hospitalmanagement;

import Objects.Patient;
import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author numan.kilincoglu
 */
public class PatientRegistrationGUI extends javax.swing.JFrame {

    Patient patient = new Patient();
    Connection conn;
    PreparedStatement pst;
    Statement st;
    ResultSet rs;

    public PatientRegistrationGUI() {
        initComponents();
        firstAdjustments();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        hastakayitpaneli = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        name_txt = new javax.swing.JTextField();
        surname_txt = new javax.swing.JTextField();
        txt_mail = new javax.swing.JTextField();
        g_male = new javax.swing.JRadioButton();
        g_female = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        pass_txt = new javax.swing.JPasswordField();
        combo_placeB覺rth = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        adress_txt = new javax.swing.JTextArea();
        datechooser = new com.toedter.calendar.JDateChooser();
        register_btn = new javax.swing.JButton();
        phone_txt = new javax.swing.JFormattedTextField();
        blood_group = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        txt_tcno = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        pnl_rules = new javax.swing.JPanel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        pass_bar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Patient Registration");
        setPreferredSize(new java.awt.Dimension(825, 630));
        setResizable(false);

        hastakayitpaneli.setBackground(new java.awt.Color(170, 255, 255));
        hastakayitpaneli.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        hastakayitpaneli.setForeground(new java.awt.Color(0, 0, 0));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("NAME");

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("SURNAME");

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("TC NO");

        jLabel9.setBackground(new java.awt.Color(0, 0, 0));
        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("PHONE");

        jLabel10.setBackground(new java.awt.Color(0, 0, 0));
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("MAIL");

        jLabel11.setBackground(new java.awt.Color(0, 0, 0));
        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("GENDER");

        name_txt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        name_txt.setForeground(new java.awt.Color(0, 0, 0));

        surname_txt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        surname_txt.setForeground(new java.awt.Color(0, 0, 0));

        txt_mail.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txt_mail.setForeground(new java.awt.Color(0, 0, 0));

        buttonGroup1.add(g_male);
        g_male.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        g_male.setForeground(new java.awt.Color(0, 0, 0));
        g_male.setText("MALE");

        buttonGroup1.add(g_female);
        g_female.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        g_female.setForeground(new java.awt.Color(0, 0, 0));
        g_female.setText("FEMALE");

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("PASSWORD");

        jLabel13.setBackground(new java.awt.Color(0, 0, 0));
        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("ADDRESS");

        jLabel14.setBackground(new java.awt.Color(0, 0, 0));
        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("PLACE OF BIRTH");

        jLabel15.setBackground(new java.awt.Color(0, 0, 0));
        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("DATE OF BIRTH");

        pass_txt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        pass_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pass_txtKeyReleased(evt);
            }
        });

        combo_placeB覺rth.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        combo_placeB覺rth.setForeground(new java.awt.Color(0, 0, 0));
        combo_placeB覺rth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DUZCE", "ISTANBUL", "ANKARA", "IZMIR", "ADANA", "KOCAELI" }));

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("PATIENT REGISTERATION");

        adress_txt.setColumns(20);
        adress_txt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        adress_txt.setLineWrap(true);
        adress_txt.setRows(5);
        adress_txt.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(adress_txt);

        datechooser.setForeground(new java.awt.Color(0, 0, 0));
        datechooser.setToolTipText("");

        register_btn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        register_btn.setForeground(new java.awt.Color(0, 0, 0));
        register_btn.setText("REGISTER");
        register_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                register_btnActionPerformed(evt);
            }
        });

        phone_txt.setForeground(new java.awt.Color(0, 0, 0));
        try {
            phone_txt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("0##########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        phone_txt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        blood_group.setForeground(new java.awt.Color(0, 0, 0));
        blood_group.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A+", "B+", "AB+", "0+", "A-", "B-", "AB-", "0-" }));

        jLabel12.setBackground(new java.awt.Color(0, 0, 0));
        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("BLOOD GROUP");

        txt_tcno.setForeground(new java.awt.Color(0, 0, 0));
        try {
            txt_tcno.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txt_tcno.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("* Please fill in the all required fields.");

        pnl_rules.setBackground(new java.awt.Color(170, 255, 255));
        pnl_rules.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "Rules", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        jLabel46.setForeground(new java.awt.Color(255, 0, 0));
        jLabel46.setText("* Surname must contain only letters.");

        jLabel47.setForeground(new java.awt.Color(255, 0, 0));
        jLabel47.setText("* Surname must contain only letters.");

        jLabel48.setForeground(new java.awt.Color(255, 0, 0));
        jLabel48.setText("* Name must contain only letters.");

        jLabel49.setForeground(new java.awt.Color(255, 0, 0));
        jLabel49.setText("* TCNO must  be 11 numerical characters only.");

        jLabel50.setForeground(new java.awt.Color(255, 0, 0));
        jLabel50.setText("* Password must contains at least 5 charachters and  ");

        jLabel51.setForeground(new java.awt.Color(255, 0, 0));
        jLabel51.setText("1 special charachter.");

        javax.swing.GroupLayout pnl_rulesLayout = new javax.swing.GroupLayout(pnl_rules);
        pnl_rules.setLayout(pnl_rulesLayout);
        pnl_rulesLayout.setHorizontalGroup(
            pnl_rulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_rulesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_rulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel46, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel48, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnl_rulesLayout.createSequentialGroup()
                        .addGroup(pnl_rulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel51)
                            .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel49))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_rulesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnl_rulesLayout.setVerticalGroup(
            pnl_rulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_rulesLayout.createSequentialGroup()
                .addComponent(jLabel50)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel51)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel49)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel48)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel47)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel46)
                .addGap(28, 28, 28))
        );

        pass_bar.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        javax.swing.GroupLayout hastakayitpaneliLayout = new javax.swing.GroupLayout(hastakayitpaneli);
        hastakayitpaneli.setLayout(hastakayitpaneliLayout);
        hastakayitpaneliLayout.setHorizontalGroup(
            hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hastakayitpaneliLayout.createSequentialGroup()
                .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hastakayitpaneliLayout.createSequentialGroup()
                        .addGap(279, 279, 279)
                        .addComponent(jLabel2))
                    .addGroup(hastakayitpaneliLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(hastakayitpaneliLayout.createSequentialGroup()
                                .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(register_btn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(hastakayitpaneliLayout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, hastakayitpaneliLayout.createSequentialGroup()
                                            .addComponent(jLabel10)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txt_mail, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, hastakayitpaneliLayout.createSequentialGroup()
                                            .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel7)
                                                .addComponent(jLabel8)
                                                .addComponent(jLabel9))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                                            .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(phone_txt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txt_tcno, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(surname_txt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(hastakayitpaneliLayout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(datechooser, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(51, 51, 51)
                                .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel11))
                                .addGap(48, 48, 48)
                                .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(combo_placeB覺rth, 0, 170, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(pass_txt)
                                        .addComponent(blood_group, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(hastakayitpaneliLayout.createSequentialGroup()
                                        .addComponent(g_male)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(g_female))
                                    .addComponent(pass_bar, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(hastakayitpaneliLayout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(pnl_rules, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        hastakayitpaneliLayout.setVerticalGroup(
            hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hastakayitpaneliLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(37, 37, 37)
                .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(pass_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pass_bar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(surname_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13))
                    .addGroup(hastakayitpaneliLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(hastakayitpaneliLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(42, 42, 42)
                                .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(txt_tcno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hastakayitpaneliLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(phone_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)))
                    .addGroup(hastakayitpaneliLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(combo_placeB覺rth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(blood_group, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt_mail, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(g_male)
                        .addComponent(g_female))
                    .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel15)
                        .addComponent(datechooser, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(hastakayitpaneliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hastakayitpaneliLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addComponent(register_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addContainerGap(66, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hastakayitpaneliLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnl_rules, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(hastakayitpaneli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hastakayitpaneli, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void firstAdjustments() {
        pnl_rules.setVisible(false);
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            @Override
            //WINDOW CLOSING ACTION.
            public void windowClosing(WindowEvent e) {
                int selection = JOptionPane.showConfirmDialog(rootPane, "ARE YOU SURE YOU WANT TO QUIT?", "QUIT", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                if (selection == JOptionPane.YES_OPTION) {
                    try {
                        e.getWindow().dispose();
                        Login log = new Login();
                        log.setVisible(true);
                    } catch (IOException ex) {
                        Logger.getLogger(PatientRegistrationGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });

    }

    private void register_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_register_btnActionPerformed

        conn = null;
        String pass = new String(pass_txt.getPassword());
        SimpleDateFormat date = new SimpleDateFormat("dd-MM-yyyy");
        String patientTC = txt_tcno.getText();
        String name = name_txt.getText();
        String surname = surname_txt.getText();
        String adress = adress_txt.getText();
        String phone = phone_txt.getText();
        String mail = txt_mail.getText();
        String place = (String) combo_placeB覺rth.getSelectedItem();
        String bloodgroup = (String) blood_group.getSelectedItem();

        Matcher matcher;

        if (txt_tcno.getText().isEmpty()) {
            pnl_rules.setVisible(true);
            return;
        } else {
            pnl_rules.setVisible(false);
        }

        if (name_txt.getText().isEmpty()) {
            pnl_rules.setVisible(true);
            return;
        } else {
            matcher = Pattern.compile("^[a-zA-Z\\u0080-\\u9fff]*+$").matcher(name_txt.getText());
            if (!matcher.find()) {
                System.out.println("name tutamdi");
                pnl_rules.setVisible(true);
                return;
            } else {
                System.out.println("tutttu");
                pnl_rules.setVisible(false);
            }
        }

        if (surname_txt.getText().isEmpty()) {
            pnl_rules.setVisible(true);
            return;
        } else {
            matcher = Pattern.compile("^[a-zA-Z\\u0080-\\u9fff]*+$").matcher(surname_txt.getText());
            if (!matcher.find()) {
                System.out.println("surname tutamdi");
                pnl_rules.setVisible(true);
                return;
            } else {
                System.out.println("tutttu");
                pnl_rules.setVisible(false);
            }
        }

        if (phone_txt.getText().length() != 11) {
            pnl_rules.setVisible(true);
            return;
        } else {
            pnl_rules.setVisible(false);
        }

        if (txt_mail.getText().isEmpty()) {
            pnl_rules.setVisible(true);
            return;
        } else {
            matcher = Pattern.compile("^[a-zA-Z][\\w\\d]{2,}@[a-z]{2,10}(.com)$").matcher(txt_mail.getText());
            if (!matcher.find()) {
                pnl_rules.setVisible(true);
                return;
            } else {
                pnl_rules.setVisible(false);
            }
        }

        if (pass_txt.getPassword().length == 0) {
            pnl_rules.setVisible(true);
            return;
        } else {
            if (pass_bar.getValue() < 33) {
                pnl_rules.setVisible(true);
                return;
            } else {
                pnl_rules.setVisible(false);
            }
        }

        if (datechooser.getDate() == null) {
            pnl_rules.setVisible(true);
            return;
        } else {
            pnl_rules.setVisible(false);
        }

        if (buttonGroup1.getSelection() == null) {
            pnl_rules.setVisible(true);
            return;

        }

        String birthdate = date.format(datechooser.getDate());

        String gender = "";
        if (g_male.isSelected()) {
            gender = "MALE";
        } else {
            gender = "FEMALE";

        }

        //UNIQUENESS CONTROLS
        boolean mailcontrol = mailControl(mail);
        boolean phonecontrol = phoneControl(phone);
        boolean tcCont = tcControl(patientTC);

        if (mailcontrol && phonecontrol && tcCont) {
            boolean addControl = addPatient(name, surname, phone, mail, place, bloodgroup, adress, pass, patientTC, gender, birthdate);
            if (addControl) {
                try {
                    JOptionPane.showMessageDialog(rootPane, "Patient was successfully created .", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                    Login log = new Login();
                    log.setVisible(true);
                    this.dispose();
                } catch (IOException ex) {
                    Logger.getLogger(PatientRegistrationGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {

                JOptionPane.showMessageDialog(rootPane, "TCNO must be unique.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Phone and Mail must be unique.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_register_btnActionPerformed

    //THIS METHOD ADDS NEW PATIENT INTI DATABASE
    private boolean addPatient(String name, String surname, String phone, String mail, String place, String bloodgroup, String adress, String pass, String tc, String gender, String birthdate) {
        boolean rvalue = false;
        try {

            int id = autoID();
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            pst = conn.prepareStatement("INSERT INTO PATIENTS VALUES(?,?,?,?,?,?,?,?,?,?,?,?)");
            pst.setInt(1, id);
            pst.setString(2, name);
            pst.setString(3, surname);
            pst.setString(4, phone);
            pst.setString(5, mail);
            pst.setString(6, place);
            pst.setString(7, bloodgroup);
            pst.setString(8, adress);
            pst.setString(9, pass);
            pst.setString(10, tc);
            pst.setString(11, gender);
            pst.setString(12, birthdate);
            pst.executeUpdate();
            rvalue = true;
            conn.close();
            return rvalue;

        } catch (SQLException ex) {
            Logger.getLogger(PatientRegistrationGUI.class.getName()).log(Level.SEVERE, null, ex);
            return rvalue;
        }
    }

    private boolean mailControl(String mail) {
        boolean rvalue = true;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = "SELECT * FROM PATIENTS WHERE MAIL = ? ";
            pst = conn.prepareStatement(query);
            pst.setString(1, mail);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query2 = "SELECT * FROM DOCTORS WHERE MAIL = ? ";
            pst = conn.prepareStatement(query2);
            pst.setString(1, mail);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query3 = "SELECT * FROM PHARMACISTS WHERE MAIL = ? ";
            pst = conn.prepareStatement(query3);
            pst.setString(1, mail);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query4 = "SELECT * FROM ADMIN WHERE MAIL = ? ";
            pst = conn.prepareStatement(query4);
            pst.setString(1, mail);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rvalue;
    }

    private boolean phoneControl(String phone) {
        boolean rvalue = true;
        try {

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = "SELECT * FROM PATIENTS WHERE PHONE = ? ";
            pst = conn.prepareStatement(query);
            pst.setString(1, phone);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query2 = "SELECT * FROM DOCTORS WHERE PHONE = ? ";
            pst = conn.prepareStatement(query2);
            pst.setString(1, phone);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query3 = "SELECT * FROM PHARMACISTS WHERE PHONE = ? ";
            pst = conn.prepareStatement(query3);
            pst.setString(1, phone);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query4 = "SELECT * FROM ADMIN WHERE PHONE = ? ";
            pst = conn.prepareStatement(query4);
            pst.setString(1, phone);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rvalue;
    }

    private boolean tcControl(String tc) {
        boolean rvalue = true;
        try {

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = "SELECT * FROM PATIENTS WHERE TCNO = ? ";
            pst = conn.prepareStatement(query);
            pst.setString(1, tc);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query2 = "SELECT * FROM DOCTORS WHERE TCNO = ? ";
            pst = conn.prepareStatement(query2);
            pst.setString(1, tc);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query3 = "SELECT * FROM PHARMACISTS WHERE TCNO = ? ";
            pst = conn.prepareStatement(query3);
            pst.setString(1, tc);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query4 = "SELECT * FROM ADMIN WHERE TC = ? ";
            pst = conn.prepareStatement(query4);
            pst.setString(1, tc);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rvalue;

    }

    //PASSWORD STRENGTH TEST
    private void pass_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pass_txtKeyReleased
        pass_bar.setForeground(Color.BLACK);
        String pass = new String(pass_txt.getPassword());
        pass_bar.setStringPainted(true);
        System.out.println(pass);
        int strength = passwordStrength(pass);
        pass_bar.setValue(strength * 10);
    }//GEN-LAST:event_pass_txtKeyReleased

    private int passwordStrength(String pass) {

        int strengthScore = 0;
        if (pass.length() < 5) {
            return 0;
        } else if (pass.length() >= 10) {
            strengthScore += 2;
        } else {
            strengthScore += 1;
        }

        if (pass.matches("(?=.*[0-9]).*")) {
            strengthScore += 2;
        }

        if (pass.matches("(?=.*[a-z]).*")) {
            strengthScore += 2;
        }

        if (pass.matches("(?=.*[A-Z]).*")) {
            strengthScore += 2;
        }

        if (pass.matches("(?=.*[~!@#$%^&*()_-]).*")) {
            strengthScore += 2;
        }
        return strengthScore;
    }

    //THIS METHOD GENERATE ID FOR PATIENT AUTOMATICALLY.
    private int autoID() {
        int id = 0;
        conn = null;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            Statement stm = conn.createStatement();
            rs = stm.executeQuery("SELECT MAX(ID) FROM PATIENTS");
            rs.next();
            rs.getInt(1);
            if (rs.getInt(1) == 0) {
                id = 1;
                return id;
            } else {
                id = (rs.getInt(1));
                id++;
                return id;
            }

        } catch (SQLException ex) {
            Logger.getLogger(PatientRegistrationGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();

            }

        } catch (SQLException ex) {
            Logger.getLogger(PatientRegistrationGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        return id;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientRegistrationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientRegistrationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientRegistrationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientRegistrationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PatientRegistrationGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea adress_txt;
    private javax.swing.JComboBox<String> blood_group;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> combo_placeB覺rth;
    private com.toedter.calendar.JDateChooser datechooser;
    private javax.swing.JRadioButton g_female;
    private javax.swing.JRadioButton g_male;
    private javax.swing.JPanel hastakayitpaneli;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField name_txt;
    private javax.swing.JProgressBar pass_bar;
    private javax.swing.JPasswordField pass_txt;
    private javax.swing.JFormattedTextField phone_txt;
    private javax.swing.JPanel pnl_rules;
    private javax.swing.JButton register_btn;
    private javax.swing.JTextField surname_txt;
    private javax.swing.JTextField txt_mail;
    private javax.swing.JFormattedTextField txt_tcno;
    // End of variables declaration//GEN-END:variables
}
