/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.hospitalmanagement;

import Objects.Admin;
import Objects.Clinic;
import Objects.Doctor;
import Objects.Patient;
import Objects.Test;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author numan.kilincoglu
 */
public class AdminGUI extends javax.swing.JFrame {

    Admin Admin = new Admin();
    Doctor doctor = new Doctor();
    Test test = new Test();
    DefaultListModel clinicModel = new DefaultListModel();
    DefaultListModel docClinicModel = new DefaultListModel();
    DefaultListModel patientClinicModel = new DefaultListModel();
    DefaultListModel editClinicModel = new DefaultListModel();
    static int choosenDoctorID = 0;
    static int choosenBranchID = 0;
    String AdminLoginTC;
    Connection conn;
    PreparedStatement pst;
    ResultSet rs;
    static Patient patient = new Patient();
    String patientTCNO = "";
    DefaultTableModel doctorModel = new DefaultTableModel(new Object[][]{},
            new String[]{
                "ID", "Clinic ID", "Name", "Surname", "TCNO", "Branch", "Place Of Birth", "Date Of Birth", "Gender", "Mail", "Phone"
            }) {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    DefaultTableModel patientModel = new DefaultTableModel(new Object[][]{},
            new String[]{
                "ID", "Name", "Surname", "Phone", "Mail", "Place Of Birth", "Bload Group", "Adress", "TCNO", "Gender", "Date Of Birth"
            }) {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    DefaultTableModel testModel = new DefaultTableModel(new Object[][]{},
            new String[]{
                "ID", "Patient ID", "Doctor ID", "Doctor Name", "Patient Name", "Type", "Test Date", "Result Date"
            }) {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    DefaultTableModel pharmacistModel = new DefaultTableModel(new Object[][]{},
            new String[]{
                "ID", "Name", "Surname", "TC NO", "Mail", "Phone"
            }) {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    /**
     * Creates new form Admin
     */
    public AdminGUI(String TCNO) throws SQLException {
        initComponents();
        this.AdminLoginTC = TCNO;
        firstAdjustments();
        showAdminInfos();

    }

    public AdminGUI() throws SQLException {
        initComponents();
        firstAdjustments();
        showAdminInfos();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        pop_doctors = new javax.swing.JPopupMenu();
        menu_deleteDoc = new javax.swing.JMenuItem();
        menu_updateDoc = new javax.swing.JMenuItem();
        pop_patients = new javax.swing.JPopupMenu();
        menu_deletePatients = new javax.swing.JMenuItem();
        menu_updatePatient = new javax.swing.JMenuItem();
        pnl_main = new javax.swing.JPanel();
        split = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        tab_main = new javax.swing.JTabbedPane();
        tab_addDoctor = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt_doc_name = new javax.swing.JTextField();
        txt_doc_surname = new javax.swing.JTextField();
        txt_doctor_tcno = new javax.swing.JFormattedTextField();
        date_chooser = new com.toedter.calendar.JDateChooser();
        txt_doc_phone = new javax.swing.JFormattedTextField();
        combo_branch = new javax.swing.JComboBox<>();
        female_btn = new javax.swing.JRadioButton();
        male_btn = new javax.swing.JRadioButton();
        place_birth = new javax.swing.JComboBox<>();
        txt_doctor_pass = new javax.swing.JPasswordField();
        jLabel13 = new javax.swing.JLabel();
        txt_docMail = new javax.swing.JTextField();
        btn_addDoc = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        pnl_rules = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        bar_docpass = new javax.swing.JProgressBar();
        tab_doctors = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_doctors = new javax.swing.JTable();
        btn_updateDoctor = new javax.swing.JButton();
        btn_deleteDoctor = new javax.swing.JButton();
        txt_docSearch = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        btn_refreshDoc = new javax.swing.JButton();
        btn_searchDoc = new javax.swing.JButton();
        tab_patients = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_patients = new javax.swing.JTable();
        btn_refreshPatients = new javax.swing.JButton();
        btn_deletePatient = new javax.swing.JButton();
        txt_searchPatient = new javax.swing.JTextField();
        btn_updatePatient = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        btn_searchPatient = new javax.swing.JButton();
        tab_laboratory = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbl_tests = new javax.swing.JTable();
        jLabel23 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txt_searchTest = new javax.swing.JTextField();
        btn_showTestDetails = new javax.swing.JButton();
        btn_deleteTestResult = new javax.swing.JButton();
        btn_testRefresh = new javax.swing.JButton();
        btn_searchTest = new javax.swing.JButton();
        tab_clinics = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lbl_docNum = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        lbl_patientNum = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        lst_clinicPatients = new javax.swing.JList<>();
        jScrollPane8 = new javax.swing.JScrollPane();
        lst_clinicDocs = new javax.swing.JList<>();
        jScrollPane9 = new javax.swing.JScrollPane();
        lst_clinics = new javax.swing.JList<>();
        lst_refresh = new javax.swing.JButton();
        tab_addClinic = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        txt_clinicName = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txt_clinicID = new javax.swing.JTextField();
        btn_createClinic = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel27 = new javax.swing.JLabel();
        lbl_clnicNameWarning = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lst_editClinics = new javax.swing.JList<>();
        jLabel25 = new javax.swing.JLabel();
        txt_clinicSearch = new javax.swing.JTextField();
        btn_clinicUpdate = new javax.swing.JButton();
        btn_clinicDelete = new javax.swing.JButton();
        editClinicName = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        editClinic_ID = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        btn_refreshClinicList = new javax.swing.JButton();
        btn_searchClinic = new javax.swing.JButton();
        pnl_pharmacy = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        txt_agentName = new javax.swing.JTextField();
        txt_agentSurname = new javax.swing.JTextField();
        txt_agentTC = new javax.swing.JFormattedTextField();
        txt_agentMail = new javax.swing.JTextField();
        txt_agentPhone = new javax.swing.JFormattedTextField();
        combo_cityAgent = new javax.swing.JComboBox<>();
        r_male = new javax.swing.JRadioButton();
        r_female = new javax.swing.JRadioButton();
        date_agent = new com.toedter.calendar.JDateChooser();
        pass_agent = new javax.swing.JPasswordField();
        pnl_rules1 = new javax.swing.JPanel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        btn_addPharmacist = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbl_agents = new javax.swing.JTable();
        jLabel45 = new javax.swing.JLabel();
        btn_refreshPharma = new javax.swing.JButton();
        btn_updateAgent = new javax.swing.JButton();
        btn_deleteAgent = new javax.swing.JButton();
        pass_bar = new javax.swing.JProgressBar();
        jLabel44 = new javax.swing.JLabel();
        jSeparator10 = new javax.swing.JSeparator();
        pnl_right = new javax.swing.JPanel();
        admin_informations = new javax.swing.JPanel();
        lbl_f = new javax.swing.JLabel();
        lbl = new javax.swing.JLabel();
        lbl_name = new javax.swing.JLabel();
        lbl_isim4 = new javax.swing.JLabel();
        lbl_isim5 = new javax.swing.JLabel();
        lbl_isim6 = new javax.swing.JLabel();
        lbl_datebirth = new javax.swing.JLabel();
        lbl_placebirth = new javax.swing.JLabel();
        lbl_surname = new javax.swing.JLabel();
        lbl_phone = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        lbl_displayDate = new javax.swing.JLabel();
        lbl_displayHour = new javax.swing.JLabel();
        MENU = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        menu_closedateLabel = new javax.swing.JRadioButtonMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        menu_ClosetimeLabel = new javax.swing.JCheckBoxMenuItem();
        menu_background = new javax.swing.JMenuItem();

        menu_deleteDoc.setText("Delete");
        menu_deleteDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_deleteDocActionPerformed(evt);
            }
        });
        pop_doctors.add(menu_deleteDoc);

        menu_updateDoc.setText("Update");
        menu_updateDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_updateDocActionPerformed(evt);
            }
        });
        pop_doctors.add(menu_updateDoc);

        menu_deletePatients.setForeground(new java.awt.Color(0, 0, 0));
        menu_deletePatients.setText("Delete");
        menu_deletePatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_deletePatientsActionPerformed(evt);
            }
        });
        pop_patients.add(menu_deletePatients);

        menu_updatePatient.setForeground(new java.awt.Color(0, 0, 0));
        menu_updatePatient.setText("Update");
        menu_updatePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_updatePatientActionPerformed(evt);
            }
        });
        pop_patients.add(menu_updatePatient);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ADMIN SECTION");

        pnl_main.setBackground(new java.awt.Color(120, 255, 255));
        pnl_main.setPreferredSize(new java.awt.Dimension(1050, 845));

        split.setDividerLocation(875);
        split.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        split.setPreferredSize(new java.awt.Dimension(1081, 870));

        jPanel4.setBackground(new java.awt.Color(100, 176, 235));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setForeground(new java.awt.Color(100, 176, 235));

        tab_main.setBackground(new java.awt.Color(0, 0, 0));
        tab_main.setForeground(new java.awt.Color(0, 0, 0));
        tab_main.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        tab_addDoctor.setBackground(new java.awt.Color(170, 255, 255));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("NAME:");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("SURNAME:");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("DATE OF BIRTH");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("TC NO:");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("BRANCH:");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("PHONE:");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("GENDER:");

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("PLACE OF BIRTH:");

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("PASSWORD:");

        txt_doc_name.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_doc_name.setForeground(new java.awt.Color(0, 0, 0));

        txt_doc_surname.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_doc_surname.setForeground(new java.awt.Color(0, 0, 0));

        txt_doctor_tcno.setForeground(new java.awt.Color(0, 0, 0));
        try {
            txt_doctor_tcno.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txt_doctor_tcno.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        date_chooser.setForeground(new java.awt.Color(0, 0, 0));
        date_chooser.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        txt_doc_phone.setForeground(new java.awt.Color(0, 0, 0));
        try {
            txt_doc_phone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("0##########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txt_doc_phone.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        combo_branch.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        combo_branch.setForeground(new java.awt.Color(0, 0, 0));

        buttonGroup1.add(female_btn);
        female_btn.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        female_btn.setForeground(new java.awt.Color(0, 0, 0));
        female_btn.setText("FEMALE");

        buttonGroup1.add(male_btn);
        male_btn.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        male_btn.setForeground(new java.awt.Color(0, 0, 0));
        male_btn.setText("MALE");

        place_birth.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        place_birth.setForeground(new java.awt.Color(0, 0, 0));
        place_birth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "İSTANBUL", "ANKARA", "DÜZCE", "İZMİR", "DİYARBAKIR" }));

        txt_doctor_pass.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_doctor_pass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_doctor_passKeyReleased(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("MAİL");

        txt_docMail.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_docMail.setForeground(new java.awt.Color(0, 0, 0));

        btn_addDoc.setBackground(new java.awt.Color(120, 255, 255));
        btn_addDoc.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_addDoc.setForeground(new java.awt.Color(0, 0, 0));
        btn_addDoc.setText("ADD NEW DOCTOR");
        btn_addDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addDocActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(0, 0, 0));
        jLabel29.setText("ADD NEW DOCTOR");

        pnl_rules.setBackground(new java.awt.Color(170, 255, 255));
        pnl_rules.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "Rules", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        jLabel34.setForeground(new java.awt.Color(255, 0, 0));
        jLabel34.setText("* TCNO must  be 11 numerical characters only.");

        jLabel35.setForeground(new java.awt.Color(255, 0, 0));
        jLabel35.setText("* Surname must contain only letters.");

        jLabel31.setForeground(new java.awt.Color(255, 0, 0));
        jLabel31.setText("* Surname must contain only letters.");

        jLabel33.setForeground(new java.awt.Color(255, 0, 0));
        jLabel33.setText("* Name must contain only letters.");

        jLabel36.setForeground(new java.awt.Color(255, 0, 0));
        jLabel36.setText("* TCNO must  be 11 numerical characters only.");

        jLabel37.setForeground(new java.awt.Color(255, 0, 0));
        jLabel37.setText("* Password must contains at least 5 charachters and  ");

        jLabel38.setForeground(new java.awt.Color(255, 0, 0));
        jLabel38.setText("1 special charachter.");

        javax.swing.GroupLayout pnl_rulesLayout = new javax.swing.GroupLayout(pnl_rules);
        pnl_rules.setLayout(pnl_rulesLayout);
        pnl_rulesLayout.setHorizontalGroup(
            pnl_rulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_rulesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_rulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_rulesLayout.createSequentialGroup()
                        .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(42, 42, 42))
                    .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnl_rulesLayout.createSequentialGroup()
                        .addGroup(pnl_rulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_rulesLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel37))
                            .addGroup(pnl_rulesLayout.createSequentialGroup()
                                .addComponent(jLabel38)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(pnl_rulesLayout.createSequentialGroup()
                        .addGroup(pnl_rulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel36))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnl_rulesLayout.setVerticalGroup(
            pnl_rulesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_rulesLayout.createSequentialGroup()
                .addComponent(jLabel37)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel36)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel35)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel34)
                .addContainerGap())
        );

        javax.swing.GroupLayout tab_addDoctorLayout = new javax.swing.GroupLayout(tab_addDoctor);
        tab_addDoctor.setLayout(tab_addDoctorLayout);
        tab_addDoctorLayout.setHorizontalGroup(
            tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_addDoctorLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_addDoctorLayout.createSequentialGroup()
                        .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel13)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7))
                        .addGap(30, 30, 30)
                        .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_docMail)
                            .addComponent(txt_doctor_tcno)
                            .addComponent(txt_doc_surname)
                            .addComponent(txt_doc_phone, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                            .addComponent(txt_doc_name))
                        .addGap(140, 140, 140)
                        .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(tab_addDoctorLayout.createSequentialGroup()
                                .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(date_chooser, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                                    .addComponent(combo_branch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tab_addDoctorLayout.createSequentialGroup()
                                .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(jLabel10))
                                .addGap(18, 18, 18)
                                .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(tab_addDoctorLayout.createSequentialGroup()
                                        .addComponent(female_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(male_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(place_birth, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(tab_addDoctorLayout.createSequentialGroup()
                                        .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(bar_docpass, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txt_doctor_pass, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGap(157, 157, 157))
                    .addGroup(tab_addDoctorLayout.createSequentialGroup()
                        .addComponent(btn_addDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 780, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(154, Short.MAX_VALUE))))
            .addGroup(tab_addDoctorLayout.createSequentialGroup()
                .addGap(277, 277, 277)
                .addComponent(pnl_rules, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(tab_addDoctorLayout.createSequentialGroup()
                .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_addDoctorLayout.createSequentialGroup()
                        .addGap(354, 354, 354)
                        .addComponent(jLabel29))
                    .addGroup(tab_addDoctorLayout.createSequentialGroup()
                        .addGap(331, 331, 331)
                        .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tab_addDoctorLayout.setVerticalGroup(
            tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_addDoctorLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_doc_name, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel1))
                    .addComponent(date_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_doc_surname, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_branch, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(70, 70, 70)
                .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txt_docMail, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(female_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(male_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txt_doctor_tcno, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(place_birth, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addGroup(tab_addDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_doc_phone, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_doctor_pass, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bar_docpass, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_addDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnl_rules, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        tab_main.addTab("ADD DOCTOR", tab_addDoctor);

        tab_doctors.setBackground(new java.awt.Color(170, 255, 255));

        tbl_doctors.setForeground(new java.awt.Color(0, 0, 0));
        tbl_doctors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbl_doctors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbl_doctorsMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_doctors);

        btn_updateDoctor.setBackground(new java.awt.Color(120, 255, 255));
        btn_updateDoctor.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_updateDoctor.setForeground(new java.awt.Color(0, 0, 0));
        btn_updateDoctor.setText("UPDATE RECORD");
        btn_updateDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateDoctorActionPerformed(evt);
            }
        });

        btn_deleteDoctor.setBackground(new java.awt.Color(120, 255, 255));
        btn_deleteDoctor.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_deleteDoctor.setForeground(new java.awt.Color(0, 0, 0));
        btn_deleteDoctor.setText("DELETE RECORD");
        btn_deleteDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteDoctorActionPerformed(evt);
            }
        });

        txt_docSearch.setBackground(new java.awt.Color(255, 255, 255));
        txt_docSearch.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        txt_docSearch.setForeground(new java.awt.Color(0, 0, 0));

        jLabel20.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 0, 0));
        jLabel20.setText("DOCTOR LIST");

        btn_refreshDoc.setBackground(new java.awt.Color(120, 255, 255));
        btn_refreshDoc.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_refreshDoc.setForeground(new java.awt.Color(0, 0, 0));
        btn_refreshDoc.setText("REFRESH RECORDS");
        btn_refreshDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshDocActionPerformed(evt);
            }
        });

        btn_searchDoc.setBackground(new java.awt.Color(120, 255, 255));
        btn_searchDoc.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btn_searchDoc.setForeground(new java.awt.Color(0, 0, 0));
        btn_searchDoc.setText("SEARCH");
        btn_searchDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchDocActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tab_doctorsLayout = new javax.swing.GroupLayout(tab_doctors);
        tab_doctors.setLayout(tab_doctorsLayout);
        tab_doctorsLayout.setHorizontalGroup(
            tab_doctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_doctorsLayout.createSequentialGroup()
                .addGap(348, 348, 348)
                .addComponent(jLabel20)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(tab_doctorsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_updateDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_refreshDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_deleteDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(tab_doctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_doctorsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_docSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tab_doctorsLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(btn_searchDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
            .addGroup(tab_doctorsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        tab_doctorsLayout.setVerticalGroup(
            tab_doctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_doctorsLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel20)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
                .addGap(21, 21, 21)
                .addGroup(tab_doctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_doctorsLayout.createSequentialGroup()
                        .addComponent(btn_searchDoc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_docSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_doctorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_updateDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_refreshDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_deleteDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tab_main.addTab("DOCTORS", tab_doctors);

        tab_patients.setBackground(new java.awt.Color(170, 255, 255));

        tbl_patients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbl_patients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbl_patientsMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_patients);

        btn_refreshPatients.setBackground(new java.awt.Color(120, 255, 255));
        btn_refreshPatients.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_refreshPatients.setForeground(new java.awt.Color(0, 0, 0));
        btn_refreshPatients.setText("REFRESH RECORD");
        btn_refreshPatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshPatientsActionPerformed(evt);
            }
        });

        btn_deletePatient.setBackground(new java.awt.Color(120, 255, 255));
        btn_deletePatient.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_deletePatient.setForeground(new java.awt.Color(0, 0, 0));
        btn_deletePatient.setText("DELETE PATIENT");
        btn_deletePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deletePatientActionPerformed(evt);
            }
        });

        txt_searchPatient.setBackground(new java.awt.Color(255, 255, 255));
        txt_searchPatient.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_searchPatient.setForeground(new java.awt.Color(0, 0, 0));

        btn_updatePatient.setBackground(new java.awt.Color(120, 255, 255));
        btn_updatePatient.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_updatePatient.setForeground(new java.awt.Color(0, 0, 0));
        btn_updatePatient.setText("UPDATE RECORDS");
        btn_updatePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updatePatientActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 0, 0));
        jLabel22.setText("PATIEINT LIST");

        btn_searchPatient.setBackground(new java.awt.Color(120, 255, 255));
        btn_searchPatient.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btn_searchPatient.setForeground(new java.awt.Color(0, 0, 0));
        btn_searchPatient.setText("SEARCH");
        btn_searchPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchPatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tab_patientsLayout = new javax.swing.GroupLayout(tab_patients);
        tab_patients.setLayout(tab_patientsLayout);
        tab_patientsLayout.setHorizontalGroup(
            tab_patientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_patientsLayout.createSequentialGroup()
                .addGroup(tab_patientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_patientsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tab_patientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2)
                            .addGroup(tab_patientsLayout.createSequentialGroup()
                                .addComponent(btn_updatePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_refreshPatients, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_deletePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(tab_patientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(tab_patientsLayout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(txt_searchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(tab_patientsLayout.createSequentialGroup()
                                        .addGap(46, 46, 46)
                                        .addComponent(btn_searchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(tab_patientsLayout.createSequentialGroup()
                        .addGap(348, 348, 348)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9))
        );
        tab_patientsLayout.setVerticalGroup(
            tab_patientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_patientsLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel22)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 751, Short.MAX_VALUE)
                .addGap(21, 21, 21)
                .addGroup(tab_patientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_patientsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_updatePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_refreshPatients, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_deletePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_patientsLayout.createSequentialGroup()
                        .addComponent(btn_searchPatient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_searchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tab_main.addTab("PATIENTS", tab_patients);

        tab_laboratory.setBackground(new java.awt.Color(170, 255, 255));

        tbl_tests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tbl_tests);

        jLabel23.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 0, 0));
        jLabel23.setText("TEST LIST");

        jLabel17.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 0));
        jLabel17.setText("Search Test Results");

        btn_showTestDetails.setBackground(new java.awt.Color(120, 255, 255));
        btn_showTestDetails.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_showTestDetails.setForeground(new java.awt.Color(0, 0, 0));
        btn_showTestDetails.setText("SHOW TEST DETAILS");
        btn_showTestDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_showTestDetailsActionPerformed(evt);
            }
        });

        btn_deleteTestResult.setBackground(new java.awt.Color(120, 255, 255));
        btn_deleteTestResult.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_deleteTestResult.setForeground(new java.awt.Color(0, 0, 0));
        btn_deleteTestResult.setText("DELETE TEST RESULT");
        btn_deleteTestResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteTestResultActionPerformed(evt);
            }
        });

        btn_testRefresh.setBackground(new java.awt.Color(120, 255, 255));
        btn_testRefresh.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_testRefresh.setForeground(new java.awt.Color(0, 0, 0));
        btn_testRefresh.setText("REFRESH");
        btn_testRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_testRefreshActionPerformed(evt);
            }
        });

        btn_searchTest.setBackground(new java.awt.Color(120, 255, 255));
        btn_searchTest.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btn_searchTest.setForeground(new java.awt.Color(0, 0, 0));
        btn_searchTest.setText("Search");
        btn_searchTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tab_laboratoryLayout = new javax.swing.GroupLayout(tab_laboratory);
        tab_laboratory.setLayout(tab_laboratoryLayout);
        tab_laboratoryLayout.setHorizontalGroup(
            tab_laboratoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_laboratoryLayout.createSequentialGroup()
                .addGap(251, 251, 251)
                .addComponent(jLabel23)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(tab_laboratoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(tab_laboratoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(tab_laboratoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(tab_laboratoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_searchTest)
                            .addComponent(btn_deleteTestResult, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                            .addComponent(btn_showTestDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(btn_testRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn_searchTest, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );
        tab_laboratoryLayout.setVerticalGroup(
            tab_laboratoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_laboratoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(tab_laboratoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_laboratoryLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_searchTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_searchTest)
                        .addGap(126, 126, 126)
                        .addComponent(btn_showTestDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(188, 188, 188)
                        .addComponent(btn_deleteTestResult, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)
                        .addComponent(btn_testRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66))
                    .addGroup(tab_laboratoryLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)
                        .addContainerGap())))
        );

        tab_main.addTab("LABORATORY", tab_laboratory);

        tab_clinics.setBackground(new java.awt.Color(170, 255, 255));

        jLabel18.setBackground(new java.awt.Color(100, 176, 235));
        jLabel18.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 0, 0));
        jLabel18.setText("CLINICS");

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Total Doctor Number Of This Clinic:");

        lbl_docNum.setBackground(new java.awt.Color(0, 0, 0));
        lbl_docNum.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        jLabel24.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(0, 0, 0));
        jLabel24.setText("Total Patient Number Of Selected Doctor:");

        lbl_patientNum.setBackground(new java.awt.Color(0, 0, 0));
        lbl_patientNum.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        jScrollPane7.setBorder(null);

        lst_clinicPatients.setBackground(new java.awt.Color(255, 255, 255));
        lst_clinicPatients.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "PATIENTS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        lst_clinicPatients.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jScrollPane7.setViewportView(lst_clinicPatients);

        jScrollPane8.setBorder(null);

        lst_clinicDocs.setBackground(new java.awt.Color(255, 255, 255));
        lst_clinicDocs.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "DOCTORS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        lst_clinicDocs.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lst_clinicDocs.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lst_clinicDocsValueChanged(evt);
            }
        });
        jScrollPane8.setViewportView(lst_clinicDocs);

        jScrollPane9.setBorder(null);

        lst_clinics.setBackground(new java.awt.Color(255, 255, 255));
        lst_clinics.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "CLINICS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        lst_clinics.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lst_clinics.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lst_clinicsValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(lst_clinics);

        lst_refresh.setBackground(new java.awt.Color(120, 255, 255));
        lst_refresh.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lst_refresh.setForeground(new java.awt.Color(0, 0, 0));
        lst_refresh.setText("REFRESH");
        lst_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lst_refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tab_clinicsLayout = new javax.swing.GroupLayout(tab_clinics);
        tab_clinics.setLayout(tab_clinicsLayout);
        tab_clinicsLayout.setHorizontalGroup(
            tab_clinicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_clinicsLayout.createSequentialGroup()
                .addGroup(tab_clinicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_clinicsLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(lbl_docNum, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(jLabel24)
                        .addGap(18, 18, 18)
                        .addComponent(lbl_patientNum, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))
                    .addGroup(tab_clinicsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tab_clinicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_clinicsLayout.createSequentialGroup()
                                .addGroup(tab_clinicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(tab_clinicsLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(tab_clinicsLayout.createSequentialGroup()
                                        .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                                        .addGap(15, 15, 15)
                                        .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE))
                            .addComponent(lst_refresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        tab_clinicsLayout.setVerticalGroup(
            tab_clinicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_clinicsLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(tab_clinicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_patientNum, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tab_clinicsLayout.createSequentialGroup()
                        .addGroup(tab_clinicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                            .addComponent(jScrollPane8)
                            .addComponent(jScrollPane7))
                        .addGap(22, 22, 22)
                        .addComponent(lst_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addGroup(tab_clinicsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(lbl_docNum, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(93, 93, 93))
        );

        tab_main.addTab("CLINICS", tab_clinics);

        tab_addClinic.setBackground(new java.awt.Color(170, 255, 255));

        jLabel15.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("ADD NEW CLINIC");

        jPanel2.setBackground(new java.awt.Color(170, 255, 255));

        txt_clinicName.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_clinicName.setForeground(new java.awt.Color(0, 0, 0));

        jLabel19.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 0));
        jLabel19.setText("CLINIC NAME:");

        jLabel21.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 0, 0));
        jLabel21.setText("CLINIC ID:");

        txt_clinicID.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_clinicID.setForeground(new java.awt.Color(0, 0, 0));
        txt_clinicID.setEnabled(false);

        btn_createClinic.setBackground(new java.awt.Color(120, 255, 255));
        btn_createClinic.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_createClinic.setForeground(new java.awt.Color(0, 0, 0));
        btn_createClinic.setText("CREATE CLINIC");
        btn_createClinic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_createClinicActionPerformed(evt);
            }
        });

        jSeparator6.setAlignmentY(2.0F);

        jLabel27.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(0, 0, 0));
        jLabel27.setText("EDIT CLINIC");

        lbl_clnicNameWarning.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lbl_clnicNameWarning.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel27)
                        .addGap(367, 367, 367))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_createClinic, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(316, 316, 316))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_clinicName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbl_clnicNameWarning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(92, 92, 92)
                .addComponent(jLabel21)
                .addGap(18, 18, 18)
                .addComponent(txt_clinicID, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_clinicName, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(txt_clinicID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_clnicNameWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_createClinic, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel27)
                .addGap(18, 18, 18))
        );

        lst_editClinics.setBackground(new java.awt.Color(255, 255, 255));
        lst_editClinics.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "CLINICS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        lst_editClinics.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lst_editClinics.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lst_editClinicsValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(lst_editClinics);

        jLabel25.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(0, 0, 0));
        jLabel25.setText("Search");

        txt_clinicSearch.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_clinicSearch.setForeground(new java.awt.Color(0, 0, 0));

        btn_clinicUpdate.setBackground(new java.awt.Color(120, 255, 255));
        btn_clinicUpdate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_clinicUpdate.setForeground(new java.awt.Color(0, 0, 0));
        btn_clinicUpdate.setText("UPDATE CLINIC");
        btn_clinicUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clinicUpdateActionPerformed(evt);
            }
        });

        btn_clinicDelete.setBackground(new java.awt.Color(120, 255, 255));
        btn_clinicDelete.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_clinicDelete.setForeground(new java.awt.Color(0, 0, 0));
        btn_clinicDelete.setText("DELETE CLINIC");
        btn_clinicDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clinicDeleteActionPerformed(evt);
            }
        });

        editClinicName.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        editClinicName.setForeground(new java.awt.Color(0, 0, 0));

        jLabel26.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(0, 0, 0));
        jLabel26.setText("Clinic Name");

        editClinic_ID.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        editClinic_ID.setForeground(new java.awt.Color(0, 0, 0));
        editClinic_ID.setEnabled(false);

        jLabel28.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(0, 0, 0));
        jLabel28.setText("Clinic ID");

        btn_refreshClinicList.setBackground(new java.awt.Color(120, 255, 255));
        btn_refreshClinicList.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_refreshClinicList.setForeground(new java.awt.Color(0, 0, 0));
        btn_refreshClinicList.setText("REFRESH LIST");
        btn_refreshClinicList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshClinicListActionPerformed(evt);
            }
        });

        btn_searchClinic.setBackground(new java.awt.Color(120, 255, 255));
        btn_searchClinic.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_searchClinic.setForeground(new java.awt.Color(0, 0, 0));
        btn_searchClinic.setText("SEARCH");
        btn_searchClinic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchClinicActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tab_addClinicLayout = new javax.swing.GroupLayout(tab_addClinic);
        tab_addClinic.setLayout(tab_addClinicLayout);
        tab_addClinicLayout.setHorizontalGroup(
            tab_addClinicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_addClinicLayout.createSequentialGroup()
                .addGroup(tab_addClinicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_addClinicLayout.createSequentialGroup()
                        .addGap(363, 363, 363)
                        .addComponent(jLabel15)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(tab_addClinicLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tab_addClinicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator1)
                            .addComponent(jSeparator7))))
                .addContainerGap())
            .addGroup(tab_addClinicLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_refreshClinicList, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                .addGroup(tab_addClinicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_addClinicLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(tab_addClinicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_searchClinic, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_clinicSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addGroup(tab_addClinicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(editClinicName, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                            .addComponent(btn_clinicUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(tab_addClinicLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(tab_addClinicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btn_clinicDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editClinic_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(tab_addClinicLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel28)
                        .addGap(179, 179, 179))
                    .addGroup(tab_addClinicLayout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel26)
                        .addGap(53, 53, 53))))
        );
        tab_addClinicLayout.setVerticalGroup(
            tab_addClinicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_addClinicLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(tab_addClinicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_addClinicLayout.createSequentialGroup()
                        .addGroup(tab_addClinicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26)
                            .addComponent(jLabel25))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(tab_addClinicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editClinicName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_clinicSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(tab_addClinicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_searchClinic, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_clinicUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 158, Short.MAX_VALUE)
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editClinic_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(btn_clinicDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_addClinicLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_refreshClinicList, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4))
                .addGap(46, 46, 46))
        );

        tab_main.addTab("ADD CLINIC", tab_addClinic);

        pnl_pharmacy.setBackground(new java.awt.Color(170, 255, 255));

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Name:");

        jLabel16.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 0));
        jLabel16.setText("Surname:");

        jLabel30.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(0, 0, 0));
        jLabel30.setText("TCNO:");

        jLabel32.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(0, 0, 0));
        jLabel32.setText("Mail:");

        jLabel39.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(0, 0, 0));
        jLabel39.setText("Phone:");

        jLabel40.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(0, 0, 0));
        jLabel40.setText("Place Of Birth:");

        jLabel41.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(0, 0, 0));
        jLabel41.setText("Gender:");

        jLabel42.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(0, 0, 0));
        jLabel42.setText("Date Of Birth:");

        jLabel43.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(0, 0, 0));
        jLabel43.setText("Password:");

        txt_agentName.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_agentName.setForeground(new java.awt.Color(0, 0, 0));

        txt_agentSurname.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_agentSurname.setForeground(new java.awt.Color(0, 0, 0));

        txt_agentTC.setForeground(new java.awt.Color(0, 0, 0));
        try {
            txt_agentTC.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txt_agentTC.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        txt_agentMail.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        txt_agentMail.setForeground(new java.awt.Color(0, 0, 0));

        txt_agentPhone.setForeground(new java.awt.Color(0, 0, 0));
        try {
            txt_agentPhone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("0##########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txt_agentPhone.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        combo_cityAgent.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        combo_cityAgent.setForeground(new java.awt.Color(0, 0, 0));
        combo_cityAgent.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DUZCE", "ISTANBUL", "ANKARA", "IZMIR", "KOCAELI", "NEW YORK", "LOS ANGELES", "KRAKOW", "MOSCOW" }));

        buttonGroup2.add(r_male);
        r_male.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        r_male.setForeground(new java.awt.Color(0, 0, 0));
        r_male.setText("Male");

        buttonGroup2.add(r_female);
        r_female.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        r_female.setForeground(new java.awt.Color(0, 0, 0));
        r_female.setText("Female");

        pass_agent.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        pass_agent.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pass_agentKeyReleased(evt);
            }
        });

        pnl_rules1.setBackground(new java.awt.Color(170, 255, 255));
        pnl_rules1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "Rules", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        jLabel46.setForeground(new java.awt.Color(255, 0, 0));
        jLabel46.setText("* Surname must contain only letters.");

        jLabel47.setForeground(new java.awt.Color(255, 0, 0));
        jLabel47.setText("* Surname must contain only letters.");

        jLabel48.setForeground(new java.awt.Color(255, 0, 0));
        jLabel48.setText("* Name must contain only letters.");

        jLabel49.setForeground(new java.awt.Color(255, 0, 0));
        jLabel49.setText("* TCNO must  be 11 numerical characters only.");

        jLabel50.setForeground(new java.awt.Color(255, 0, 0));
        jLabel50.setText("* Password must contains at least 5 charachters and  ");

        jLabel51.setForeground(new java.awt.Color(255, 0, 0));
        jLabel51.setText("1 special charachter.");

        javax.swing.GroupLayout pnl_rules1Layout = new javax.swing.GroupLayout(pnl_rules1);
        pnl_rules1.setLayout(pnl_rules1Layout);
        pnl_rules1Layout.setHorizontalGroup(
            pnl_rules1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_rules1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_rules1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel46, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel48, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnl_rules1Layout.createSequentialGroup()
                        .addGroup(pnl_rules1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel51)
                            .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel49))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_rules1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnl_rules1Layout.setVerticalGroup(
            pnl_rules1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_rules1Layout.createSequentialGroup()
                .addComponent(jLabel50)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel51)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel49)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel48)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel47)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel46)
                .addGap(28, 28, 28))
        );

        btn_addPharmacist.setBackground(new java.awt.Color(120, 255, 255));
        btn_addPharmacist.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_addPharmacist.setForeground(new java.awt.Color(0, 0, 0));
        btn_addPharmacist.setText("NEW PHARMACIST");
        btn_addPharmacist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addPharmacistActionPerformed(evt);
            }
        });

        tbl_agents.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        tbl_agents.setForeground(new java.awt.Color(0, 0, 0));
        tbl_agents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(tbl_agents);

        jLabel45.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(0, 0, 0));
        jLabel45.setText("Pharmacy Agents");

        btn_refreshPharma.setBackground(new java.awt.Color(120, 255, 255));
        btn_refreshPharma.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_refreshPharma.setForeground(new java.awt.Color(0, 0, 0));
        btn_refreshPharma.setText("Refresh");
        btn_refreshPharma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshPharmaActionPerformed(evt);
            }
        });

        btn_updateAgent.setBackground(new java.awt.Color(120, 255, 255));
        btn_updateAgent.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_updateAgent.setForeground(new java.awt.Color(0, 0, 0));
        btn_updateAgent.setText("Update");
        btn_updateAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateAgentActionPerformed(evt);
            }
        });

        btn_deleteAgent.setBackground(new java.awt.Color(120, 255, 255));
        btn_deleteAgent.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_deleteAgent.setForeground(new java.awt.Color(0, 0, 0));
        btn_deleteAgent.setText("Delete");
        btn_deleteAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteAgentActionPerformed(evt);
            }
        });

        pass_bar.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        jLabel44.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(0, 0, 0));
        jLabel44.setText("ADD NEW AGENT");

        javax.swing.GroupLayout pnl_pharmacyLayout = new javax.swing.GroupLayout(pnl_pharmacy);
        pnl_pharmacy.setLayout(pnl_pharmacyLayout);
        pnl_pharmacyLayout.setHorizontalGroup(
            pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_pharmacyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnl_rules1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_pharmacyLayout.createSequentialGroup()
                .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_pharmacyLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(pnl_pharmacyLayout.createSequentialGroup()
                                .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txt_agentMail, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnl_pharmacyLayout.createSequentialGroup()
                                .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel30))
                                .addGap(54, 54, 54)
                                .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_agentSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_agentTC, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_agentName, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnl_pharmacyLayout.createSequentialGroup()
                                .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel39)
                                    .addComponent(jLabel40)
                                    .addComponent(jLabel41))
                                .addGap(20, 20, 20)
                                .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnl_pharmacyLayout.createSequentialGroup()
                                        .addComponent(r_male, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(r_female, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(combo_cityAgent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_agentPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnl_pharmacyLayout.createSequentialGroup()
                                .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel42)
                                    .addComponent(jLabel43))
                                .addGap(26, 26, 26)
                                .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(date_agent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pass_bar, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pass_agent, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btn_addPharmacist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_pharmacyLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_pharmacyLayout.createSequentialGroup()
                                .addComponent(jLabel44)
                                .addGap(31, 31, 31)))
                        .addGap(19, 19, 19)))
                .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_pharmacyLayout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(jLabel45))
                    .addGroup(pnl_pharmacyLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_pharmacyLayout.createSequentialGroup()
                                .addComponent(btn_refreshPharma, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btn_updateAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(btn_deleteAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane5))))
                .addGap(37, 37, 37))
        );
        pnl_pharmacyLayout.setVerticalGroup(
            pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_pharmacyLayout.createSequentialGroup()
                .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_pharmacyLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel45)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane5)
                        .addGap(33, 33, 33))
                    .addGroup(pnl_pharmacyLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txt_agentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(txt_agentSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel30)
                            .addComponent(txt_agentTC, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32)
                            .addComponent(txt_agentMail, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel39)
                            .addComponent(txt_agentPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel40)
                            .addComponent(combo_cityAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel41)
                            .addComponent(r_male)
                            .addComponent(r_female))
                        .addGap(36, 36, 36)
                        .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(date_agent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel42))
                        .addGap(43, 43, 43)
                        .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel43)
                            .addComponent(pass_agent, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pass_bar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_addPharmacist, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)))
                .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnl_rules1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_refreshPharma, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_pharmacyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_updateAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_deleteAgent, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tab_main.addTab("PHARMACY", pnl_pharmacy);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tab_main, javax.swing.GroupLayout.PREFERRED_SIZE, 863, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tab_main)
                .addContainerGap())
        );

        split.setLeftComponent(jPanel4);

        pnl_right.setBackground(new java.awt.Color(120, 255, 255));
        pnl_right.setForeground(new java.awt.Color(0, 0, 0));
        pnl_right.setPreferredSize(new java.awt.Dimension(1035, 797));

        admin_informations.setBackground(new java.awt.Color(170, 255, 255));
        admin_informations.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "Admin", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        admin_informations.setForeground(new java.awt.Color(0, 0, 0));
        admin_informations.setFont(new java.awt.Font("Franklin Gothic Demi", 1, 12)); // NOI18N

        lbl_f.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_f.setForeground(new java.awt.Color(0, 0, 0));
        lbl_f.setText("PHONE:");

        lbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl.setForeground(new java.awt.Color(0, 0, 0));
        lbl.setText("SURNAME:");

        lbl_name.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_name.setForeground(new java.awt.Color(0, 0, 0));

        lbl_isim4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_isim4.setForeground(new java.awt.Color(0, 0, 0));
        lbl_isim4.setText("DATE OF BIRTH:");

        lbl_isim5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_isim5.setForeground(new java.awt.Color(0, 0, 0));
        lbl_isim5.setText("PLACE OF BIRTH:");

        lbl_isim6.setBackground(new java.awt.Color(0, 0, 0));
        lbl_isim6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_isim6.setForeground(new java.awt.Color(0, 0, 0));
        lbl_isim6.setText("NAME:");

        lbl_datebirth.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_datebirth.setForeground(new java.awt.Color(0, 0, 0));

        lbl_placebirth.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_placebirth.setForeground(new java.awt.Color(0, 0, 0));

        lbl_surname.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_surname.setForeground(new java.awt.Color(0, 0, 0));

        lbl_phone.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_phone.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout admin_informationsLayout = new javax.swing.GroupLayout(admin_informations);
        admin_informations.setLayout(admin_informationsLayout);
        admin_informationsLayout.setHorizontalGroup(
            admin_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(admin_informationsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(admin_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(admin_informationsLayout.createSequentialGroup()
                        .addGroup(admin_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(admin_informationsLayout.createSequentialGroup()
                                .addComponent(lbl_f, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_phone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(admin_informationsLayout.createSequentialGroup()
                                .addComponent(lbl_isim6, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(admin_informationsLayout.createSequentialGroup()
                                .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_surname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator4)
                    .addGroup(admin_informationsLayout.createSequentialGroup()
                        .addComponent(lbl_isim4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_datebirth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator5)
                    .addGroup(admin_informationsLayout.createSequentialGroup()
                        .addComponent(lbl_isim5, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_placebirth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        admin_informationsLayout.setVerticalGroup(
            admin_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(admin_informationsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(admin_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_isim6, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(lbl_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(admin_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(lbl_surname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(admin_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(admin_informationsLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lbl_phone, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(admin_informationsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_f, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(admin_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_isim4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_datebirth, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(admin_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_isim5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_placebirth, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77))
        );

        lbl_displayDate.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        lbl_displayHour.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_displayHour.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout pnl_rightLayout = new javax.swing.GroupLayout(pnl_right);
        pnl_right.setLayout(pnl_rightLayout);
        pnl_rightLayout.setHorizontalGroup(
            pnl_rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_rightLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(admin_informations, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_rightLayout.createSequentialGroup()
                        .addGap(0, 256, Short.MAX_VALUE)
                        .addGroup(pnl_rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbl_displayDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_displayHour, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        pnl_rightLayout.setVerticalGroup(
            pnl_rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_rightLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(admin_informations, javax.swing.GroupLayout.PREFERRED_SIZE, 363, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(lbl_displayDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbl_displayHour, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(478, 478, 478))
        );

        split.setRightComponent(pnl_right);

        javax.swing.GroupLayout pnl_mainLayout = new javax.swing.GroupLayout(pnl_main);
        pnl_main.setLayout(pnl_mainLayout);
        pnl_mainLayout.setHorizontalGroup(
            pnl_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_mainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(split, javax.swing.GroupLayout.DEFAULT_SIZE, 1294, Short.MAX_VALUE))
        );
        pnl_mainLayout.setVerticalGroup(
            pnl_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(split, javax.swing.GroupLayout.DEFAULT_SIZE, 955, Short.MAX_VALUE)
        );

        MENU.setBackground(new java.awt.Color(100, 176, 235));
        MENU.setForeground(new java.awt.Color(100, 176, 235));
        MENU.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        menu.setForeground(new java.awt.Color(0, 0, 0));
        menu.setText("Settings");
        menu.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        menu_closedateLabel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_closedateLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        menu_closedateLabel.setForeground(new java.awt.Color(0, 0, 0));
        menu_closedateLabel.setText("Close Date Label");
        menu_closedateLabel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menu_closedateLabelStateChanged(evt);
            }
        });
        menu.add(menu_closedateLabel);
        menu.add(jSeparator9);

        menu_ClosetimeLabel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_ClosetimeLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        menu_ClosetimeLabel.setForeground(new java.awt.Color(0, 0, 0));
        menu_ClosetimeLabel.setText("Close Time Label");
        menu_ClosetimeLabel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                menu_ClosetimeLabelStateChanged(evt);
            }
        });
        menu.add(menu_ClosetimeLabel);

        menu_background.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_background.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        menu_background.setForeground(new java.awt.Color(0, 0, 0));
        menu_background.setText("Bacground Color");
        menu_background.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_backgroundActionPerformed(evt);
            }
        });
        menu.add(menu_background);

        MENU.add(menu);

        setJMenuBar(MENU);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl_main, javax.swing.GroupLayout.DEFAULT_SIZE, 1300, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl_main, javax.swing.GroupLayout.DEFAULT_SIZE, 955, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //First settings of the program.
    private void firstAdjustments() {
        pnl_rules1.setVisible(false);
        pnl_rules.setVisible(false);
        tbl_agents.setModel(pharmacistModel);
        tbl_doctors.setModel(doctorModel);
        tbl_patients.setModel(patientModel);
        lst_clinics.setModel(clinicModel);
        lst_clinicDocs.setModel(docClinicModel);
        lst_clinicPatients.setModel(patientClinicModel);
        tbl_tests.setModel(testModel);
        lst_editClinics.setModel(editClinicModel);
        tbl_tests.setModel(testModel);
        listEditClinics();
        getAgents();
        listClinic();
        tableDoctors();
        tablePatientList();
        listClinics();
        displayTime();
        testList();

    }

    //pop up
    private void showPopUp(MouseEvent evt) {
        if (evt.isPopupTrigger()) {
            pop_doctors.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }

    //menu item can close date label.
    private void menu_closedateLabelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_menu_closedateLabelStateChanged
        if (menu_closedateLabel.isSelected()) {
            lbl_displayDate.setVisible(false);
        } else {
            lbl_displayDate.setVisible(true);
        }
    }//GEN-LAST:event_menu_closedateLabelStateChanged

    //menu item can close time label.
    private void menu_ClosetimeLabelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_menu_ClosetimeLabelStateChanged
        if (menu_ClosetimeLabel.isSelected()) {
            lbl_displayHour.setVisible(false);
        } else {
            lbl_displayHour.setVisible(true);
        }
    }//GEN-LAST:event_menu_ClosetimeLabelStateChanged

    //menu item can change background.
    private void menu_backgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_backgroundActionPerformed
        Color firstCol = new Color(170, 255, 255);
        Color color = JColorChooser.showDialog(this, "Choose Bacground Color", Color.BLACK);
        if (color == null) {
            tab_addDoctor.setBackground(firstCol);
            tab_doctors.setBackground(firstCol);
            tab_patients.setBackground(firstCol);
            tab_addClinic.setBackground(firstCol);
            pnl_pharmacy.setBackground(firstCol);
            tab_clinics.setBackground(firstCol);
            tab_laboratory.setBackground(firstCol);
            jPanel2.setBackground(color);
        } else {
            jPanel2.setBackground(color);
            tab_addDoctor.setBackground(color);
            tab_doctors.setBackground(color);
            tab_patients.setBackground(color);
            tab_addClinic.setBackground(color);
            pnl_pharmacy.setBackground(color);
            tab_clinics.setBackground(color);
            tab_laboratory.setBackground(color);
        }
    }//GEN-LAST:event_menu_backgroundActionPerformed

    private void btn_searchClinicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchClinicActionPerformed

        clinicSearch(txt_clinicSearch.getText());
    }//GEN-LAST:event_btn_searchClinicActionPerformed

    private void btn_refreshClinicListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshClinicListActionPerformed

        editClinicModel.removeAllElements();
        listEditClinics();
    }//GEN-LAST:event_btn_refreshClinicListActionPerformed

    //Clinic delete button delete the selected clinic.
    private void btn_clinicDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clinicDeleteActionPerformed

        if (lst_editClinics.getSelectedIndex() != -1) {
            String[] id = lst_editClinics.getSelectedValue().split("-");
            if (id[0] != null) {
                int clinicid = Integer.parseInt(id[0]);
                Clinic clinic = new Clinic();
                int x = JOptionPane.showConfirmDialog(rootPane, "Are you sure?", "Confirmation", JOptionPane.YES_NO_OPTION);
                if (x == JOptionPane.YES_NO_OPTION) {
                    boolean control = clinic.deleteClinic(clinicid);
                    if (control) {
                        editClinicModel.removeAllElements();
                        listEditClinics();
                        JOptionPane.showMessageDialog(rootPane, "Clinic was deleted.", "Deleted", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "An error occured while creating recod .", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }

    }//GEN-LAST:event_btn_clinicDeleteActionPerformed

    //by clicking clinic update button you can update clinic name.
    private void btn_clinicUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clinicUpdateActionPerformed

        if (editClinicName.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Please fill the required field", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            if (lst_editClinics.getSelectedIndex() != -1) {
                Clinic clinic = new Clinic();
                String[] word = lst_editClinics.getSelectedValue().split("-");
                int id = Integer.parseInt(word[0]);
                String cliniNewName = editClinicName.getText();
                int x = JOptionPane.showConfirmDialog(rootPane, "Do you want to change name of this clinic ", "Confirmation", JOptionPane.YES_NO_OPTION);
                if (x == JOptionPane.YES_OPTION) {
                    boolean key = clinic.updateClinic(cliniNewName, id);
                    if (key) {
                        JOptionPane.showMessageDialog(rootPane, "Clinic was updated successfully", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "New clinic name MUST be unique", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }

            }

        }
    }//GEN-LAST:event_btn_clinicUpdateActionPerformed


    private void lst_editClinicsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lst_editClinicsValueChanged
        editClinic_ID.setText("");
        if (!evt.getValueIsAdjusting() && lst_editClinics.getSelectedIndex() != -1) {
            String[] word = lst_editClinics.getSelectedValue().split("-");
            String id = word[0];
            editClinic_ID.setText(id);
        }

    }//GEN-LAST:event_lst_editClinicsValueChanged

    // you can create a new clinic(clinic name must be unique) by clicking this button.
    private void btn_createClinicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_createClinicActionPerformed
        //First of all I used regex to check txt fields.

        if (txt_clinicName.getText().isEmpty()) {
            lbl_clnicNameWarning.setText("Clinic name must contain only letters.");
            lbl_clnicNameWarning.setVisible(true);
            return;
        } else {
            Matcher matcher = Pattern.compile("^[a-zA-Z\\s\\u0080-\\u9fff]*+$").matcher(txt_clinicName.getText());
            if (!matcher.find()) {
                lbl_clnicNameWarning.setText("Clinic name must contain only letters.");
                lbl_clnicNameWarning.setVisible(true);
                return;
            } else {
                lbl_clnicNameWarning.setVisible(false);
            }
        }

        if (txt_clinicName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Please enter a clinic name which is unique", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String clinicName = txt_clinicName.getText();

            if (clinicName.matches("^[a-zA-Z\\s]*$")) {
                int id = clinicIdGenerate();
                txt_clinicID.setText(Integer.toString(id));
                Clinic clinic = new Clinic();
                boolean control = clinic.addClinic(clinicName, id);
                if (control) {
                    JOptionPane.showMessageDialog(rootPane, "Clinic has been created.", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                    editClinicModel.removeAllElements();
                    listEditClinics();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Cliniic name MUST be unique", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Clinic Name Must Contain only letters .", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btn_createClinicActionPerformed

    private void lst_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lst_refreshActionPerformed
        clinicModel.removeAllElements();
        listClinics();
    }//GEN-LAST:event_lst_refreshActionPerformed

    //when clinicList value changed, I list the doctors who belong to selected branch and I'm showing total doctor number in a branch. 
    private void lst_clinicsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lst_clinicsValueChanged
        docClinicModel.removeAllElements();
        lbl_docNum.setText("");
        if (!evt.getValueIsAdjusting() && lst_clinics.getSelectedIndex() != -1) {
            String[] word = lst_clinics.getSelectedValue().split("-");
            int branchId = 0;
            if (word[0] != null && word[1] != null) {
                String id = word[0];
                branchId = Integer.parseInt(id);
            }
            if (branchId > 0) {
                try {
                    int docCount = 0;
                    for (int i = 0; i < Admin.getDoctors().size(); i++) {
                        Admin.getDoctors().get(i).getBranch();
                        if ((Admin.getDoctors().get(i) != null) && (Admin.getDoctors().get(i).getBRANCHID() == branchId)) {
                            String ad = Admin.getDoctors().get(i).getName();
                            String soyad = Admin.getDoctors().get(i).getSurname();
                            String id = Integer.toString(Admin.getDoctors().get(i).getId());
                            docClinicModel.addElement(id + "- " + ad + " " + soyad);
                            docCount++;
                        }
                        lbl_docNum.setText(Integer.toString(docCount));
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
    }//GEN-LAST:event_lst_clinicsValueChanged

    //when doctorList value changed, I list the patients who belong to selected doctor and I'm showing total patient of selected doctor. 
    private void lst_clinicDocsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lst_clinicDocsValueChanged
        patientClinicModel.removeAllElements();
        lbl_patientNum.setText("");
        ArrayList<Patient> patients = new ArrayList<>();
        if (!evt.getValueIsAdjusting() && lst_clinicDocs.getSelectedIndex() != -1) {
            String[] ID = lst_clinicDocs.getSelectedValue().split("-");
            int id = Integer.parseInt(ID[0]);
            patients = Admin.getPatients(id);
            int count = 0;
            for (int i = 0; i < patients.size(); i++) {
                if (patients.get(i) != null) {
                    patientClinicModel.addElement(patients.get(i).getName() + " " + patients.get(i).getSurname());
                    count++;
                }
            }
            lbl_patientNum.setText(Integer.toString(count));
        }
    }//GEN-LAST:event_lst_clinicDocsValueChanged

    //test search
    private void btn_searchTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchTestActionPerformed
        String search = txt_searchTest.getText();
        testSearch(search);
    }//GEN-LAST:event_btn_searchTestActionPerformed

    //test table refresh!!
    private void btn_testRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_testRefreshActionPerformed
        testModel.setRowCount(0);
        testList();
    }//GEN-LAST:event_btn_testRefreshActionPerformed

    // this button deletes test result from database(Only admin can delete a test result).
    private void btn_deleteTestResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteTestResultActionPerformed
        if (tbl_tests.getSelectedRow() != -1) {
            int id = (int) tbl_tests.getValueAt(tbl_tests.getSelectedRow(), 0);
            int x = JOptionPane.showConfirmDialog(rootPane, "Do you want to delete this patient's records?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                boolean control = Admin.deletetTest(id);
                if (control) {
                    JOptionPane.showMessageDialog(rootPane, "Test record has been deleted", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                    testModel.setRowCount(0);
                    testList();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btn_deleteTestResultActionPerformed

    //this button opens a new frame which displays test details.
    private void btn_showTestDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_showTestDetailsActionPerformed
        if (tbl_tests.getSelectedRow() != -1) {
            Object testID = tbl_tests.getValueAt(tbl_tests.getSelectedRow(), 0);
            int id = (int) testID;
            TestGUI testfrm = new TestGUI(id);
            testfrm.setVisible(true);
        }
    }//GEN-LAST:event_btn_showTestDetailsActionPerformed

    //search patient records.
    private void btn_searchPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchPatientActionPerformed
        String search = txt_searchPatient.getText();
        patientSearch(search);
    }//GEN-LAST:event_btn_searchPatientActionPerformed

    //this button opens a new frame which admin can update patient informations.
    private void btn_updatePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updatePatientActionPerformed
        if (tbl_patients.getSelectedRow() != -1) {
            int id = (int) tbl_patients.getValueAt(tbl_patients.getSelectedRow(), 0);
            AdminUpdatePatient frm2 = new AdminUpdatePatient(id);
            frm2.setVisible(true);
        }
    }//GEN-LAST:event_btn_updatePatientActionPerformed

    //this button delete patient informations.
    private void btn_deletePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deletePatientActionPerformed
        if (tbl_patients.getSelectedRow() != -1) {
            int id = (int) tbl_patients.getValueAt(tbl_patients.getSelectedRow(), 0);
            int x = JOptionPane.showConfirmDialog(rootPane, "Do you want to delete this patient's records?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                Admin.deletePatientppointment(id);
                boolean control = Admin.deletePatient(id);
                if (control) {
                    JOptionPane.showMessageDialog(rootPane, "Patient has been deleted", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                    patientModel.setRowCount(0);
                    tablePatientList();

                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

    }//GEN-LAST:event_btn_deletePatientActionPerformed


    private void btn_refreshPatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshPatientsActionPerformed
        patientModel.setRowCount(0);
        tablePatientList();
    }//GEN-LAST:event_btn_refreshPatientsActionPerformed

    private void btn_searchDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchDocActionPerformed
        String search = txt_docSearch.getText();
        doctorSearch(search);
    }//GEN-LAST:event_btn_searchDocActionPerformed

    private void btn_refreshDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshDocActionPerformed
        doctorModel.setRowCount(0);
        tableDoctors();
    }//GEN-LAST:event_btn_refreshDocActionPerformed

    //by clicking this button admin can delete selected doctor's record from database.
    private void btn_deleteDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteDoctorActionPerformed

        if (tbl_doctors.getSelectedRow() != -1) {
            int id = (int) tbl_doctors.getValueAt(tbl_doctors.getSelectedRow(), 0);
            int x = JOptionPane.showConfirmDialog(rootPane, "Do you want to delete this doctor's records?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                Admin.deleteDocAppointment(id);
                Admin.deleteWorkHours(id);
                boolean control = Admin.deleteDoc(id);
                if (control) {
                    JOptionPane.showMessageDialog(rootPane, "Doctor has been deleted", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                    doctorModel.setRowCount(0);
                    tableDoctors();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }

        }
    }//GEN-LAST:event_btn_deleteDoctorActionPerformed

    //this button opens a new frame which admin can update selected doctor's record. 
    private void btn_updateDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateDoctorActionPerformed
        if (tbl_doctors.getSelectedRow() != -1) {
            int id = (int) tbl_doctors.getValueAt(tbl_doctors.getSelectedRow(), 0);
            AdminUpdateDoctor frm = new AdminUpdateDoctor(id);
            frm.setVisible(true);
        }
    }//GEN-LAST:event_btn_updateDoctorActionPerformed

    //this button adds new doctor to hospital.
    private void btn_addDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addDocActionPerformed

        String name = txt_doc_name.getText();
        String surname = txt_doc_surname.getText();
        SimpleDateFormat date = new SimpleDateFormat("dd-MM-yyyy");
        String TCNO = txt_doctor_tcno.getText();
        String branch = (String) combo_branch.getSelectedItem();
        String placeBirth = (String) place_birth.getSelectedItem();
        String phone = txt_doc_phone.getText();
        String pass = new String(txt_doctor_pass.getPassword());
        String mail = txt_docMail.getText();

        //First of all, program checks the text fields by using regex.
        Matcher matcher;

        if (txt_doctor_tcno.getText().isEmpty() && txt_doctor_tcno.getText().length() != 11) {
            pnl_rules.setVisible(true);
            return;
        } else {
            pnl_rules.setVisible(false);
        }

        if (txt_doc_name.getText().isEmpty()) {
            pnl_rules.setVisible(true);
            return;
        } else {
            matcher = Pattern.compile("^[a-zA-Z0-9 \\u0080-\\u9fff]*+$").matcher(txt_doc_name.getText());
            if (!matcher.find()) {
                System.out.println("name tutamdi");
                pnl_rules.setVisible(true);
                return;
            } else {
                System.out.println("tutttu");
                pnl_rules.setVisible(false);
            }
        }

        if (txt_doc_surname.getText().isEmpty()) {
            pnl_rules.setVisible(true);
            return;
        } else {
            matcher = Pattern.compile("^[a-zA-Z0-9 \\u0080-\\u9fff]*+$").matcher(txt_doc_surname.getText());
            if (!matcher.find()) {
                System.out.println("surname tutmdi");
                pnl_rules.setVisible(true);
                return;
            } else {
                System.out.println("surname tutttu");
                pnl_rules.setVisible(false);
            }
        }

        if (txt_doc_phone.getText().length() != 11) {
            pnl_rules.setVisible(true);
            return;
        } else {
            pnl_rules.setVisible(false);
        }

        if (txt_docMail.getText().isEmpty()) {
            pnl_rules.setVisible(true);
            return;
        } else {
            matcher = Pattern.compile("^[a-zA-Z][\\w\\d]{2,}@[a-z]{2,10}(.com)$").matcher(txt_docMail.getText());
            if (!matcher.find()) {
                System.out.println("mail olmadi");
                pnl_rules.setVisible(true);
                return;
            } else {
                System.out.println("mail tuttu");
                pnl_rules.setVisible(false);
            }
        }

        if (txt_doctor_pass.getPassword().length == 0) {
            pnl_rules.setVisible(true);
            return;
        } else {
            if (bar_docpass.getValue() < 33) {
                pnl_rules.setVisible(true);
                return;
            } else {
                pnl_rules.setVisible(false);
            }
        }

        if (date_chooser.getDate() == null) {
            pnl_rules.setVisible(true);
            return;
        } else {
            pnl_rules.setVisible(false);
        }

        if (buttonGroup1.getSelection() == null) {
            pnl_rules.setVisible(true);
            return;

        }

        String gender = "";
        if (male_btn.isSelected()) {
            gender = "MALE";
        } else {
            gender = "FEMALE";
        }

        String birthdate = date.format(date_chooser.getDate());

        //Then program controls if mail,phone and tc are unique or not. 
        boolean mailcontrol = mailControl(mail);
        boolean phonecontrol = phoneControl(phone);
        boolean tcCont = tcControl(TCNO);

        if (mailcontrol && phonecontrol && tcCont) {
            //IF THEY UNIQUE, NEW DOCTOR WILL BE ADDED.
            try {
                if (Admin.addDoctor(name, surname, birthdate, TCNO, branch, placeBirth, phone, gender, pass, mail)) {
                    doctorModel.setRowCount(0);
                    tableDoctors();
                    JOptionPane.showMessageDialog(rootPane, "Doctor has been created", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Mail, TCNO and Phone number MUST be unique", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Mail, TCNO and Phone number MUST be unique", "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btn_addDocActionPerformed

    //THIS BUTTON UPDATE PHARMACY AGENT'S INFORMATIONS.
    private void btn_updateAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateAgentActionPerformed

        if (tbl_agents.getSelectedRow() != -1) {
            int id = (int) tbl_agents.getValueAt(tbl_agents.getSelectedRow(), 0);
            AdminUpdatePharmacist frm5 = new AdminUpdatePharmacist(id);
            frm5.setVisible(true);
        }
    }//GEN-LAST:event_btn_updateAgentActionPerformed

    private void btn_refreshPharmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshPharmaActionPerformed
        pharmacistModel.setRowCount(0);
        getAgents();
    }//GEN-LAST:event_btn_refreshPharmaActionPerformed

    //THIS BUTTON ADDS NEW PHARMACY AGENT TO HOSPITAL.
    private void btn_addPharmacistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addPharmacistActionPerformed
        String name = txt_agentName.getText();
        String surname = txt_agentSurname.getText();
        SimpleDateFormat date = new SimpleDateFormat("dd-MM-yyyy");
        String TCNO = txt_agentTC.getText();
        String city = (String) combo_cityAgent.getSelectedItem();
        String phone = txt_agentPhone.getText();
        String pass = new String(pass_agent.getPassword());
        String mail = txt_agentMail.getText();

        Matcher matcher;

        //FISTLY, REGEX CHECK.
        if (txt_agentTC.getText().isEmpty()) {
            pnl_rules1.setVisible(true);
            return;
        } else {
            pnl_rules1.setVisible(false);
        }

        if (txt_agentName.getText().isEmpty()) {
            pnl_rules1.setVisible(true);
            return;
        } else {
            matcher = Pattern.compile("^[a-zA-Z0-9 \\u0080-\\u9fff]*+$$").matcher(txt_agentName.getText());
            if (!matcher.find()) {
                System.out.println("tutamdi");
                pnl_rules1.setVisible(true);
                return;
            } else {
                System.out.println("tutttu");
                pnl_rules1.setVisible(false);
            }
        }

        if (txt_agentSurname.getText().isEmpty()) {
            pnl_rules1.setVisible(true);
            return;
        } else {
            matcher = Pattern.compile("^[a-zA-Z0-9 \\u0080-\\u9fff]*+$$").matcher(txt_agentSurname.getText());
            if (!matcher.find()) {
                System.out.println("tutamdi");
                pnl_rules1.setVisible(true);
                return;
            } else {
                System.out.println("tutttu");
                pnl_rules1.setVisible(false);
            }
        }

        if (txt_agentPhone.getText().length() != 11) {
            pnl_rules1.setVisible(true);
            return;
        } else {
            pnl_rules1.setVisible(false);
        }

        if (txt_agentMail.getText().isEmpty()) {
            pnl_rules1.setVisible(true);
            return;
        } else {
            matcher = Pattern.compile("^[a-zA-Z][\\w\\d]{2,}@[a-z]{2,10}(.com)$").matcher(txt_agentMail.getText());
            if (!matcher.find()) {
                System.out.println("mail olmadi");
                pnl_rules1.setVisible(true);
                return;
            } else {
                System.out.println("mail tuttu");
                pnl_rules1.setVisible(false);
            }
        }

        if (pass_agent.getPassword().length == 0) {
            pnl_rules1.setVisible(true);
            return;
        } else {
            if (pass_bar.getValue() < 33) {
                pnl_rules1.setVisible(true);
                return;
            } else {
                pnl_rules1.setVisible(false);
            }
        }

        if (date_agent.getDate() == null) {
            pnl_rules1.setVisible(true);
            return;
        } else {
            pnl_rules1.setVisible(false);
        }

        if (buttonGroup2.getSelection() == null) {
            pnl_rules1.setVisible(true);
            return;

        }

        String datebirth = date.format(date_agent.getDate());
        String gender = "";

        if (r_male.isSelected()) {
            gender = "MALE";
        } else {
            gender = "FEMALE";
        }
        //Then program controls if mail,phone and tc are unique or not. 

        boolean mailcontrol = mailControl(mail);
        boolean phonecontrol = phoneControl(phone);
        boolean tcCont = tcControl(TCNO);
        if (mailcontrol && phonecontrol && tcCont) {
            //THEN, PROGRAM EXECUTES COMMANDS.
            try {
                boolean control = Admin.addAgent(name, surname, datebirth, TCNO, city, phone, gender, pass, mail);
                if (control) {
                    pharmacistModel.setRowCount(0);
                    getAgents();
                    JOptionPane.showMessageDialog(rootPane, "Agent was created.", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Phone or Mail must be unique", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_addPharmacistActionPerformed

    //CHECKS IF MAIL UNIQUE OR NOT IN DATABASE.
    public boolean mailControl(String mail) {
        boolean rvalue = true;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = "SELECT * FROM PATIENTS WHERE MAIL = ? ";
            pst = conn.prepareStatement(query);
            pst.setString(1, mail);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query2 = "SELECT * FROM DOCTORS WHERE MAIL = ? ";
            pst = conn.prepareStatement(query2);
            pst.setString(1, mail);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query3 = "SELECT * FROM PHARMACISTS WHERE MAIL = ? ";
            pst = conn.prepareStatement(query3);
            pst.setString(1, mail);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query4 = "SELECT * FROM ADMIN WHERE MAIL = ? ";
            pst = conn.prepareStatement(query4);
            pst.setString(1, mail);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rvalue;
    }

    //CHECKS IF PHONE UNIQUE OR NOT IN DATABASE.
    public boolean phoneControl(String phone) {
        boolean rvalue = true;
        try {

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = "SELECT * FROM PATIENTS WHERE PHONE = ? ";
            pst = conn.prepareStatement(query);
            pst.setString(1, phone);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query2 = "SELECT * FROM DOCTORS WHERE PHONE = ? ";
            pst = conn.prepareStatement(query2);
            pst.setString(1, phone);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query3 = "SELECT * FROM PHARMACISTS WHERE PHONE = ? ";
            pst = conn.prepareStatement(query3);
            pst.setString(1, phone);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query4 = "SELECT * FROM ADMIN WHERE PHONE = ? ";
            pst = conn.prepareStatement(query4);
            pst.setString(1, phone);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rvalue;
    }

    //CHECKS IF TCNO UNIQUE OR NOT IN DATABASE.
    private boolean tcControl(String tc) {
        boolean rvalue = true;
        try {

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = "SELECT * FROM PATIENTS WHERE TCNO = ? ";
            pst = conn.prepareStatement(query);
            pst.setString(1, tc);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query2 = "SELECT * FROM DOCTORS WHERE TCNO = ? ";
            pst = conn.prepareStatement(query2);
            pst.setString(1, tc);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query3 = "SELECT * FROM PHARMACISTS WHERE TCNO = ? ";
            pst = conn.prepareStatement(query3);
            pst.setString(1, tc);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query4 = "SELECT * FROM ADMIN WHERE TC = ? ";
            pst = conn.prepareStatement(query4);
            pst.setString(1, tc);
            rs = pst.executeQuery();
            if (rs.next()) {
                rvalue = false;
                return rvalue;
            }
            conn.close();

        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rvalue;

    }

    //PASSWORD STRENGTH BAR ADJUSTMENTS
    private void pass_agentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pass_agentKeyReleased
        pass_bar.setForeground(Color.BLACK);
        String pass = new String(pass_agent.getPassword());
        pass_bar.setStringPainted(true);
        int strength = passwordStrength(pass);
        pass_bar.setValue(strength * 10);
    }//GEN-LAST:event_pass_agentKeyReleased

    private void btn_deleteAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteAgentActionPerformed
        if (tbl_agents.getSelectedRow() != -1) {
            int id = (int) tbl_agents.getValueAt(tbl_agents.getSelectedRow(), 0);
            int x = JOptionPane.showConfirmDialog(rootPane, "Do you want to delete this agent's records?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                boolean control = Admin.deleteAgent(id);
                if (control) {
                    pharmacistModel.setRowCount(0);
                    getAgents();
                    JOptionPane.showMessageDialog(rootPane, "Doctor has been deleted", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }

        }
    }//GEN-LAST:event_btn_deleteAgentActionPerformed

    private void txt_doctor_passKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_doctor_passKeyReleased
        bar_docpass.setForeground(Color.BLACK);
        String pass = new String(txt_doctor_pass.getPassword());
        bar_docpass.setStringPainted(true);
        int strength = passwordStrength(pass);
        bar_docpass.setValue(strength * 10);
    }//GEN-LAST:event_txt_doctor_passKeyReleased

    private void tbl_doctorsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_doctorsMouseReleased
        if (SwingUtilities.isRightMouseButton(evt) && tbl_patients.getSelectedRow() != -1) {
            showPopUp(evt);
        }
    }//GEN-LAST:event_tbl_doctorsMouseReleased

    //ADMIN CAN DELETE SELECTED DOCTOR BY USING POP UP MENU.
    private void menu_deleteDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_deleteDocActionPerformed

        if (tbl_doctors.getSelectedRow() != -1) {
            int id = (int) tbl_doctors.getValueAt(tbl_doctors.getSelectedRow(), 0);
            int x = JOptionPane.showConfirmDialog(rootPane, "Do you want to delete this doctor's records?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                Admin.deleteDocAppointment(id);
                Admin.deleteWorkHours(id);
                boolean control = Admin.deleteDoc(id);
                if (control) {
                    JOptionPane.showMessageDialog(rootPane, "Doctor has been deleted", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                    doctorModel.setRowCount(0);
                    tableDoctors();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_menu_deleteDocActionPerformed

    //ADMIN CAN UPDATE SELECTED DOCTOR'S INFORMAYIONS BY USING POP UP MENU.
    private void menu_updateDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_updateDocActionPerformed

        if (tbl_doctors.getSelectedRow() != -1) {
            int id = (int) tbl_doctors.getValueAt(tbl_doctors.getSelectedRow(), 0);
            AdminUpdateDoctor frm = new AdminUpdateDoctor(id);
            frm.setVisible(true);
        }
    }//GEN-LAST:event_menu_updateDocActionPerformed

    //POP UP MENU IS DISPLAYED WHEN ADMIN CLICK THE RIGHT MOUSE BUTTON
    private void tbl_patientsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_patientsMouseReleased
        if (SwingUtilities.isRightMouseButton(evt) && tbl_patients.getSelectedRow() != -1) {
            showPop(evt);
        }
    }//GEN-LAST:event_tbl_patientsMouseReleased

    // THIS POP UP MENU BELONGS TO PATIENT TABLE.
    private void showPop(MouseEvent evt) {
        if (evt.isPopupTrigger()) {
            pop_patients.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }

    //POP UP MENU ITEM (DELETE) CAN DELETE SELECTED PATIENT FROM DB.
    private void menu_deletePatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_deletePatientsActionPerformed
        if (tbl_patients.getSelectedRow() != -1) {
            int id = (int) tbl_patients.getValueAt(tbl_patients.getSelectedRow(), 0);
            int x = JOptionPane.showConfirmDialog(rootPane, "Do you want to delete this patient's records?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                Admin.deletePatientppointment(id);
                boolean control = Admin.deletePatient(id);
                if (control) {
                    JOptionPane.showMessageDialog(rootPane, "Patient has been deleted", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                    patientModel.setRowCount(0);
                    tablePatientList();

                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_menu_deletePatientsActionPerformed

    //POP UP MENU ITEM(UPDATE) CAN UPDATE PATIENT INFIRMATIONS IN DB.
    private void menu_updatePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_updatePatientActionPerformed
        if (tbl_patients.getSelectedRow() != -1) {
            int id = (int) tbl_patients.getValueAt(tbl_patients.getSelectedRow(), 0);
            AdminUpdatePatient frm4 = new AdminUpdatePatient(id);
            frm4.setVisible(true);
        }
    }//GEN-LAST:event_menu_updatePatientActionPerformed

    //password strength test!!!
    public int passwordStrength(String pass) {

        int strengthScore = 0;
        if (pass.length() < 5) {
            return 0;
        } else if (pass.length() >= 10) {
            strengthScore += 2;
        } else {
            strengthScore += 1;
        }

        if (pass.matches("(?=.*[0-9]).*")) {
            strengthScore += 2;
        }

        if (pass.matches("(?=.*[a-z]).*")) {
            strengthScore += 2;
        }

        if (pass.matches("(?=.*[A-Z]).*")) {
            strengthScore += 2;
        }

        if (pass.matches("(?=.*[~!@#$%^&*()_-]).*")) {
            strengthScore += 2;
        }
        return strengthScore;
    }

    // this method serach for tests in database. 
    public void testSearch(String search) {
        testModel.setRowCount(0);
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = "SELECT * FROM TEST WHERE UPPER(PATIENTNAME) || LOWER(PATIENTNAME) || UPPER(DOCTORNAME) || LOWER(DOCTORNAME) || UPPER(TYPE) || LOWER(TYPE) LIKE '%" + search + "%'";
            Statement st = conn.createStatement();
            rs = st.executeQuery(query);
            while (rs.next()) {
                int id = (rs.getInt("ID"));
                int patientID = (rs.getInt("PATIENTID"));
                int docID = (rs.getInt("DOCTORID"));
                String docName = rs.getString("DOCTORNAME");
                String patName = rs.getString("PATIENTNAME");
                String type = rs.getString("TYPE");
                String testDate = rs.getString("TESTDATE");
                String resultDate = rs.getString("RESULTDATE");
                testModel.addRow(new Object[]{id, patientID, docID, docName, patName, type, testDate, resultDate});
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // this method search for patients in database. 
    public void patientSearch(String search) {

        patientModel.setRowCount(0);
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = "SELECT * FROM PATIENTS WHERE UPPER(SURNAME)|| LOWER(SURNAME) || UPPER(NAME) || LOWER(NAME) || UPPER(GENDER) || BLOODGROUP  LIKE '%" + search + "%'";
            Statement st = conn.createStatement();
            rs = st.executeQuery(query);
            while (rs.next()) {
                int id = (rs.getInt("ID"));
                String patName = rs.getString("NAME");
                String patsurName = rs.getString("SURNAME");
                String phone = rs.getString("PHONE");
                String mail = rs.getString("MAIL");
                String placebirth = rs.getString("PLACEBIRTH");
                String blood = rs.getString("BLOODGROUP");
                String adress = rs.getString("ADRESS");
                String tc = rs.getString("TCNO");
                String gender = rs.getString("GENDER");
                String datebirth = rs.getString("BIRTHDATE");
                patientModel.addRow(new Object[]{id, patName, patsurName, phone, mail, placebirth, blood, adress, tc, gender, datebirth});
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    // this method search for doctor in database. 
    public void doctorSearch(String search) {

        doctorModel.setRowCount(0);
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = "SELECT * FROM DOCTORS WHERE UPPER(SURNAME)|| LOWER(SURNAME) || UPPER(NAME) || LOWER(NAME) || PLACEBIRTH || UPPER(GENDER) || BRANCH LIKE '%" + search + "%'";
            Statement st = conn.createStatement();
            rs = st.executeQuery(query);
            while (rs.next()) {
                int id = (rs.getInt("ID"));
                int clinicID = rs.getInt("CLINICID");
                String patName = rs.getString("NAME");
                String patsurName = rs.getString("SURNAME");
                String phone = rs.getString("PHONE");
                String branch = rs.getString("BRANCH");
                String mail = rs.getString("MAIL");
                String placebirth = rs.getString("PLACEBIRTH");
                String tc = rs.getString("TCNO");
                String gender = rs.getString("GENDER");
                String datebirth = rs.getString("BIRTHDATE");
                doctorModel.addRow(new Object[]{id, clinicID, patName, patsurName, tc, branch, placebirth, datebirth, gender, mail, phone,});
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    // this method search for clinic in database. 
    public void clinicSearch(String search) {
        editClinicModel.removeAllElements();
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = "SELECT * FROM CLINICS WHERE UPPER(NAME)|| LOWER(NAME) LIKE '%" + search + "%' ORDER BY ID ASC";
            Statement st = conn.createStatement();
            rs = st.executeQuery(query);
            while (rs.next()) {
                String id = Integer.toString(rs.getInt("ID"));
                String name = rs.getString("NAME");
                editClinicModel.addElement(id + "- " + name);
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    //this method shows current time in a label.
    public void displayTime() {
        new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Date date = new Date();
                SimpleDateFormat d1 = new SimpleDateFormat("hh:mm:ss");
                lbl_displayHour.setText("TIME : " + d1.format(date));
            }
        }).start();

        Date date1 = new Date();
        SimpleDateFormat s1 = new SimpleDateFormat("yyyy-MM-dd");
        lbl_displayDate.setText("DATE: " + s1.format(date1));

    }

    // mail and tc control
    public boolean mailandTCControl(String mail, String tc) throws SQLException {
        boolean rvalue = false;
        conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
        pst = conn.prepareStatement("SELECT * FROM DOCTORS WHERE MAIL = ?");
        pst.setString(1, mail);
        rs = pst.executeQuery();
        if (rs.next()) {
            rvalue = true;
            conn.close();
            return rvalue;
        }

        conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
        pst = conn.prepareStatement("SELECT * FROM DOCTORS WHERE TCNO = ?");
        pst.setString(1, tc);
        rs = pst.executeQuery();
        if (rs.next()) {
            rvalue = true;
            conn.close();
            return rvalue;
        }
        return rvalue;
    }

    //this method lists clinics in combobox.
    public void listClinic() {
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = ("SELECT * FROM CLINICS ORDER BY ID ASC");
            pst = conn.prepareStatement(query);
            rs = pst.executeQuery();
            while (rs.next()) {
                String branchName = rs.getString("NAME");
                combo_branch.addItem(branchName);
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void listEditClinics() {
        lst_editClinics.removeAll();
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = ("SELECT * FROM CLINICS ORDER BY ID ASC");
            pst = conn.prepareStatement(query);
            rs = pst.executeQuery();
            while (rs.next()) {
                String id = Integer.toString(rs.getInt("ID"));
                String name = rs.getString("NAME");
                editClinicModel.addElement(id + "- " + name);
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //this method lists doctors in table.
    public void tableDoctors() {

        try {
            for (int i = 0; i < Admin.getDoctors().size(); i++) {
                if (Admin.getDoctors().get(i) != null) {
                    int id = Admin.getDoctors().get(i).getId();
                    String name = Admin.getDoctors().get(i).getName();
                    String surname = Admin.getDoctors().get(i).getSurname();
                    String date = Admin.getDoctors().get(i).getDateBirth();
                    String place = Admin.getDoctors().get(i).getPalceBirth();
                    String tc = Admin.getDoctors().get(i).getTc();
                    String branch = Admin.getDoctors().get(i).getBranch();
                    String phone = Admin.getDoctors().get(i).getPhone();
                    String gender = Admin.getDoctors().get(i).getGender();
                    String mail = Admin.getDoctors().get(i).getMail();
                    int branchID = Admin.getDoctors().get(i).getBRANCHID();
                    doctorModel.addRow(new Object[]{id, branchID, name, surname, tc, branch, place, date, gender, mail, phone});
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    //this methods lists patients in patient table.
    public void tablePatientList() {
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = ("SELECT * FROM PATIENTS ORDER BY ID ASC");
            pst = conn.prepareStatement(query);
            rs = pst.executeQuery();
            while (rs.next()) {
                int id = rs.getInt("ID");
                String name = rs.getString("NAME");
                String sur = rs.getString("SURNAME");
                String birthdate = rs.getString("BIRTHDATE");
                String placebirth = rs.getString("PLACEBIRTH");
                String tc = rs.getString("TCNO");
                String phone = rs.getString("PHONE");
                String gender = rs.getString("GENDER");
                String adress = rs.getString("ADRESS");
                String mail = rs.getString("MAIL");
                String bloodgroup = rs.getString("BLOODGROUP");
                patientModel.addRow(new Object[]{id, name, sur, phone, mail, placebirth, bloodgroup, adress, tc, gender, birthdate});
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    //this method adds clinic names into combobox
    public void listClinics() {
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = ("SELECT * FROM CLINICS ORDER BY ID ASC");
            pst = conn.prepareStatement(query);
            rs = pst.executeQuery();
            while (rs.next()) {
                String ID = Integer.toString(rs.getInt("ID"));
                clinicModel.addElement(ID + "- " + rs.getString("NAME"));
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //this method shows admin informations in right panel.
    public void showAdminInfos() throws SQLException {
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            String query = ("SELECT * FROM ADMIN");
            pst = conn.prepareStatement(query);
            rs = pst.executeQuery();
            if (rs.next()) {
                Admin.setId(rs.getInt("ID"));
                Admin.setName(rs.getString("NAME"));
                Admin.setSurname(rs.getString("SURNAME"));
                Admin.setTc(rs.getString("TC"));
                Admin.setPhone(rs.getString("PHONE"));
                Admin.setMail(rs.getString("MAIL"));
                Admin.setPalceBirth(rs.getString("PLACEBIRTH"));
                Admin.setGender(rs.getString("GENDER"));
                Admin.setDateBirth(rs.getString("DATEBIRTH"));
                Admin.setBloodGroup(rs.getString("BLOODGROUP"));
                Admin.setAdress(rs.getString("ADRESS"));
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (!conn.isClosed()) {
                conn.close();
            }
        }
        lbl_name.setText(Admin.getName().toUpperCase());
        lbl_surname.setText(Admin.getSurname().toUpperCase());
        lbl_phone.setText(Admin.getPhone());
        lbl_datebirth.setText(Admin.getDateBirth());
        lbl_placebirth.setText(Admin.getPalceBirth().toUpperCase());
    }

    //this method lists tests in testtable.
    public void testList() {
        ArrayList<Test> testList = new ArrayList<>();
        testList = test.getTests();
        for (int i = 0; i < testList.size(); i++) {
            if (testList.get(i) != null) {
                int id = testList.get(i).getId();
                int docId = testList.get(i).getDocID();
                int patientID = testList.get(i).getPatientID();
                String docName = testList.get(i).getDocName();
                String patName = testList.get(i).getPatientName();
                String type = testList.get(i).getTestType();
                String testDate = testList.get(i).getTestDate();
                String resultDate = testList.get(i).getResultDate();
                testModel.addRow(new Object[]{id, patientID, docId, docName, patName, type, testDate, resultDate});
            }
        }
    }

    //this method generate clinic id for new clinic.
    private int clinicIdGenerate() {
        int id = 0;
        Connection conn = null;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            Statement stm = conn.createStatement();
            rs = stm.executeQuery("SELECT MAX(ID) FROM CLINICS");
            rs.next();
            rs.getInt(1);
            if (rs.getInt(1) == 0) {
                id = 1;
                return id;
            } else {
                id = (rs.getInt(1));
                id++;
                return id;
            }

        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }

        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
        }

        return id;

    }

    //this method lists pharmacy agents in table.
    public void getAgents() {

        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            pst = conn.prepareStatement("SELECT * FROM PHARMACISTS");
            rs = pst.executeQuery();
            while (rs.next()) {
                int id = (rs.getInt("ID"));
                String name = (rs.getString("NAME"));
                String Surname = (rs.getString("SURNAME"));
                String tc = (rs.getString("TCNO"));
                String phone = (rs.getString("PHONE"));
                String mail = (rs.getString("MAIL"));
                pharmacistModel.addRow(new Object[]{id, name, Surname, tc, mail, phone});
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
//    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AdminGUI().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(AdminGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar MENU;
    private javax.swing.JPanel admin_informations;
    private javax.swing.JProgressBar bar_docpass;
    private javax.swing.JButton btn_addDoc;
    private javax.swing.JButton btn_addPharmacist;
    private javax.swing.JButton btn_clinicDelete;
    private javax.swing.JButton btn_clinicUpdate;
    private javax.swing.JButton btn_createClinic;
    private javax.swing.JButton btn_deleteAgent;
    private javax.swing.JButton btn_deleteDoctor;
    private javax.swing.JButton btn_deletePatient;
    private javax.swing.JButton btn_deleteTestResult;
    private javax.swing.JButton btn_refreshClinicList;
    private javax.swing.JButton btn_refreshDoc;
    private javax.swing.JButton btn_refreshPatients;
    private javax.swing.JButton btn_refreshPharma;
    private javax.swing.JButton btn_searchClinic;
    private javax.swing.JButton btn_searchDoc;
    private javax.swing.JButton btn_searchPatient;
    private javax.swing.JButton btn_searchTest;
    private javax.swing.JButton btn_showTestDetails;
    private javax.swing.JButton btn_testRefresh;
    private javax.swing.JButton btn_updateAgent;
    private javax.swing.JButton btn_updateDoctor;
    private javax.swing.JButton btn_updatePatient;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> combo_branch;
    private javax.swing.JComboBox<String> combo_cityAgent;
    private com.toedter.calendar.JDateChooser date_agent;
    private com.toedter.calendar.JDateChooser date_chooser;
    private javax.swing.JTextField editClinicName;
    private javax.swing.JTextField editClinic_ID;
    private javax.swing.JRadioButton female_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JLabel lbl;
    private javax.swing.JLabel lbl_clnicNameWarning;
    private javax.swing.JLabel lbl_datebirth;
    private javax.swing.JLabel lbl_displayDate;
    private javax.swing.JLabel lbl_displayHour;
    private javax.swing.JLabel lbl_docNum;
    private javax.swing.JLabel lbl_f;
    private javax.swing.JLabel lbl_isim4;
    private javax.swing.JLabel lbl_isim5;
    private javax.swing.JLabel lbl_isim6;
    private javax.swing.JLabel lbl_name;
    private javax.swing.JLabel lbl_patientNum;
    private javax.swing.JLabel lbl_phone;
    private javax.swing.JLabel lbl_placebirth;
    private javax.swing.JLabel lbl_surname;
    private javax.swing.JList<String> lst_clinicDocs;
    private javax.swing.JList<String> lst_clinicPatients;
    private javax.swing.JList<String> lst_clinics;
    private javax.swing.JList<String> lst_editClinics;
    private javax.swing.JButton lst_refresh;
    private javax.swing.JRadioButton male_btn;
    private javax.swing.JMenu menu;
    private javax.swing.JCheckBoxMenuItem menu_ClosetimeLabel;
    private javax.swing.JMenuItem menu_background;
    private javax.swing.JRadioButtonMenuItem menu_closedateLabel;
    private javax.swing.JMenuItem menu_deleteDoc;
    private javax.swing.JMenuItem menu_deletePatients;
    private javax.swing.JMenuItem menu_updateDoc;
    private javax.swing.JMenuItem menu_updatePatient;
    private javax.swing.JPasswordField pass_agent;
    private javax.swing.JProgressBar pass_bar;
    private javax.swing.JComboBox<String> place_birth;
    private javax.swing.JPanel pnl_main;
    private javax.swing.JPanel pnl_pharmacy;
    private javax.swing.JPanel pnl_right;
    private javax.swing.JPanel pnl_rules;
    private javax.swing.JPanel pnl_rules1;
    private javax.swing.JPopupMenu pop_doctors;
    private javax.swing.JPopupMenu pop_patients;
    private javax.swing.JRadioButton r_female;
    private javax.swing.JRadioButton r_male;
    private javax.swing.JSplitPane split;
    private javax.swing.JPanel tab_addClinic;
    private javax.swing.JPanel tab_addDoctor;
    private javax.swing.JPanel tab_clinics;
    private javax.swing.JPanel tab_doctors;
    private javax.swing.JPanel tab_laboratory;
    private javax.swing.JTabbedPane tab_main;
    private javax.swing.JPanel tab_patients;
    private javax.swing.JTable tbl_agents;
    private javax.swing.JTable tbl_doctors;
    private javax.swing.JTable tbl_patients;
    private javax.swing.JTable tbl_tests;
    private javax.swing.JTextField txt_agentMail;
    private javax.swing.JTextField txt_agentName;
    private javax.swing.JFormattedTextField txt_agentPhone;
    private javax.swing.JTextField txt_agentSurname;
    private javax.swing.JFormattedTextField txt_agentTC;
    private javax.swing.JTextField txt_clinicID;
    private javax.swing.JTextField txt_clinicName;
    private javax.swing.JTextField txt_clinicSearch;
    private javax.swing.JTextField txt_docMail;
    private javax.swing.JTextField txt_docSearch;
    private javax.swing.JTextField txt_doc_name;
    private javax.swing.JFormattedTextField txt_doc_phone;
    private javax.swing.JTextField txt_doc_surname;
    private javax.swing.JPasswordField txt_doctor_pass;
    private javax.swing.JFormattedTextField txt_doctor_tcno;
    private javax.swing.JTextField txt_searchPatient;
    private javax.swing.JTextField txt_searchTest;
    // End of variables declaration//GEN-END:variables
}
