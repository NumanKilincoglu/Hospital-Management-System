/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.hospitalmanagement;

import Objects.Appointment;
import Objects.Doctor;
import Objects.Patient;
import Objects.Prescription;
import Objects.Test;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 * * *
 *
 * @author numan.kilincoglu
 */
public class DoctorGUI extends javax.swing.JFrame {

    Connection conn;
    ResultSet rs;
    PreparedStatement pst;
//    String girisDoktorTC;
    Doctor doctorMain = new Doctor();
    Doctor doctor = new Doctor();
    String TCNO;
    DefaultListModel patientModel = new DefaultListModel();
    DefaultListModel AvalilableHoursModel = new DefaultListModel();
    DefaultListModel WorkHoursModel = new DefaultListModel();

    //These are my table models.
    DefaultTableModel appointmentModel = new DefaultTableModel(new Object[][]{},
            new String[]{
                "ID", "Patient ID", "Clinic", "Doctor ID", "Patient Name", "Patient Surnname", "Appointment Date", "Status"
            }) {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    DefaultTableModel testModel = new DefaultTableModel(new Object[][]{},
            new String[]{
                "ID", "Doctor Name", "Patient Name", "Test Type", "Test Date", "Result Date", "Cost"
            }) {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    DefaultTableModel prescriptionModel = new DefaultTableModel(new Object[][]{},
            new String[]{
                "ID", "Doctor Name", "Patient Name", "Branch", "Date",}) {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    DefaultTableModel whour = new DefaultTableModel(new Object[][]{},
            new String[]{
                "ID", "Doctor ID", "Status", "Date",}) {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    /**
     * Creates new form Doctor
     */
    public DoctorGUI() {
//        initComponents();
//        showDocInfos();
//        Date date1 = new Date();
//        j_dateChooser.setMinSelectableDate(date1);
//        date_chooser.setMinSelectableDate(date1);
//        tbl_appointments.setModel(appointmentModel);
//        tbl_docPrescripts.setModel(prescriptionModel);
//        tbl_docTests.setModel(testModel);
//        lst_appPatients.setModel(patientModel);
//        lst_availableHours.setModel(AvalilableHoursModel);
//        docAppoints();
//        presCriptList();
//        testHistory();
//        patientList();
    }

    public DoctorGUI(String TCNO) {
        initComponents();
        this.TCNO = TCNO;
        doctorMain = doctor.getDoctors(this.TCNO);
        showDocInfos();
        Date date1 = new Date();
        j_dateChooser.setMinSelectableDate(date1);
        date_chooser.setMinSelectableDate(date1);
        tbl_appointments.setModel(appointmentModel);
        tbl_docPrescripts.setModel(prescriptionModel);
        tbl_docTests.setModel(testModel);
        tbl_workhours.setModel(whour);
        lst_appPatients.setModel(patientModel);
        lst_availableHours.setModel(AvalilableHoursModel);
        docAppoints();
        presCriptList();
        testHistory();
        patientList();
        getWhours();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        doctor_informations = new javax.swing.JPanel();
        lbl_isim1 = new javax.swing.JLabel();
        lbl_isim2 = new javax.swing.JLabel();
        lbl_name = new javax.swing.JLabel();
        lbl_isim4 = new javax.swing.JLabel();
        lbl_isim5 = new javax.swing.JLabel();
        lbl_isim6 = new javax.swing.JLabel();
        lbl_datebirth = new javax.swing.JLabel();
        lbl_placebirth = new javax.swing.JLabel();
        lbl_surname = new javax.swing.JLabel();
        lbl_phone = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        tab_pane = new javax.swing.JTabbedPane();
        add_app = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lst_appPatients = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        lst_availableHours = new javax.swing.JList<>();
        pnl_appinfo = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        j_dateChooser = new com.toedter.calendar.JDateChooser();
        pnl_randevuBilgi = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lbl_docName = new javax.swing.JLabel();
        lbl_appBranch = new javax.swing.JLabel();
        lbl_appHour = new javax.swing.JLabel();
        lbl_appDate = new javax.swing.JLabel();
        btn_addApp = new javax.swing.JButton();
        btn_availableHours = new javax.swing.JButton();
        appointments = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_appointments = new javax.swing.JTable();
        btn_closeCase = new javax.swing.JButton();
        btn_prescription = new javax.swing.JButton();
        btn_refreshApps = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btn_newTest = new javax.swing.JButton();
        add_whours = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        date_chooser = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        workHoursList = new javax.swing.JList<>();
        btn_addWorkHour = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JSeparator();
        btn_deleteWhour = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbl_workhours = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        btn_refreshWlist = new javax.swing.JButton();
        tab_test = new javax.swing.JPanel();
        btn_saveTest = new javax.swing.JButton();
        btn_inspectTest = new javax.swing.JButton();
        btn_testRefresh = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_docTests = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        btn_updateTest = new javax.swing.JButton();
        tab_prescriptions = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbl_docPrescripts = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        btn_refreshPrescription = new javax.swing.JButton();
        btn_inspectPrescription = new javax.swing.JButton();
        btn_savePrescription = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_changecolor = new javax.swing.JMenu();
        menu_close = new javax.swing.JMenuItem();
        menu_color = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Doctor Section");

        jPanel1.setBackground(new java.awt.Color(120, 255, 255));
        jPanel1.setForeground(new java.awt.Color(102, 153, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(931, 542));

        doctor_informations.setBackground(new java.awt.Color(170, 255, 255));
        doctor_informations.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "Doctor Informations", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        doctor_informations.setForeground(new java.awt.Color(0, 0, 0));
        doctor_informations.setFont(new java.awt.Font("Franklin Gothic Demi", 1, 12)); // NOI18N

        lbl_isim1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_isim1.setForeground(new java.awt.Color(0, 0, 0));
        lbl_isim1.setText("PHONE:");

        lbl_isim2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_isim2.setForeground(new java.awt.Color(0, 0, 0));
        lbl_isim2.setText("SURNAME:");

        lbl_name.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_name.setForeground(new java.awt.Color(0, 0, 0));

        lbl_isim4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_isim4.setForeground(new java.awt.Color(0, 0, 0));
        lbl_isim4.setText("DATE OF BIRTH:");

        lbl_isim5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_isim5.setForeground(new java.awt.Color(0, 0, 0));
        lbl_isim5.setText("PLACE OF BIRTH:");

        lbl_isim6.setBackground(new java.awt.Color(0, 0, 0));
        lbl_isim6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_isim6.setForeground(new java.awt.Color(0, 0, 0));
        lbl_isim6.setText("NAME: ");

        lbl_datebirth.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_datebirth.setForeground(new java.awt.Color(0, 0, 0));

        lbl_placebirth.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_placebirth.setForeground(new java.awt.Color(0, 0, 0));

        lbl_surname.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_surname.setForeground(new java.awt.Color(0, 0, 0));

        lbl_phone.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lbl_phone.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout doctor_informationsLayout = new javax.swing.GroupLayout(doctor_informations);
        doctor_informations.setLayout(doctor_informationsLayout);
        doctor_informationsLayout.setHorizontalGroup(
            doctor_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctor_informationsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(doctor_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator4)
                    .addComponent(jSeparator5)
                    .addGroup(doctor_informationsLayout.createSequentialGroup()
                        .addGroup(doctor_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(doctor_informationsLayout.createSequentialGroup()
                                .addComponent(lbl_isim4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_datebirth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(doctor_informationsLayout.createSequentialGroup()
                                .addComponent(lbl_isim6, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_name, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                            .addGroup(doctor_informationsLayout.createSequentialGroup()
                                .addComponent(lbl_isim1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_phone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(doctor_informationsLayout.createSequentialGroup()
                                .addComponent(lbl_isim2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_surname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(doctor_informationsLayout.createSequentialGroup()
                                .addComponent(lbl_isim5, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_placebirth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        doctor_informationsLayout.setVerticalGroup(
            doctor_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doctor_informationsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(doctor_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_isim6, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(lbl_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doctor_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_isim2, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(lbl_surname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(doctor_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(doctor_informationsLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lbl_phone, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(doctor_informationsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_isim1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doctor_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_isim4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_datebirth, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(doctor_informationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_isim5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_placebirth, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77))
        );

        tab_pane.setForeground(new java.awt.Color(0, 0, 0));
        tab_pane.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        add_app.setBackground(new java.awt.Color(170, 255, 255));

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("New Appointment");

        lst_appPatients.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "PATIENTS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        lst_appPatients.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lst_appPatients.setForeground(new java.awt.Color(0, 0, 0));
        lst_appPatients.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane6.setViewportView(lst_appPatients);

        lst_availableHours.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "AVAILABLE HOURS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        lst_availableHours.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lst_availableHours.setForeground(new java.awt.Color(0, 0, 0));
        lst_availableHours.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lst_availableHours.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lst_availableHoursValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(lst_availableHours);

        pnl_appinfo.setBackground(new java.awt.Color(170, 255, 255));

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Choose Date: ");

        j_dateChooser.setForeground(new java.awt.Color(0, 0, 0));

        pnl_randevuBilgi.setBackground(new java.awt.Color(255, 255, 255));
        pnl_randevuBilgi.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "Appointment Summary", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 0))); // NOI18N
        pnl_randevuBilgi.setForeground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Doctor:");

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Branch:");

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Appointment Date:");

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Appointment Hour:");

        lbl_docName.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lbl_docName.setForeground(new java.awt.Color(0, 0, 0));

        lbl_appBranch.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lbl_appBranch.setForeground(new java.awt.Color(0, 0, 0));

        lbl_appHour.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lbl_appHour.setForeground(new java.awt.Color(0, 0, 0));

        lbl_appDate.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        lbl_appDate.setForeground(new java.awt.Color(0, 0, 0));

        btn_addApp.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_addApp.setForeground(new java.awt.Color(0, 0, 0));
        btn_addApp.setText("NEW APPOINTMENT");
        btn_addApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addAppActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_randevuBilgiLayout = new javax.swing.GroupLayout(pnl_randevuBilgi);
        pnl_randevuBilgi.setLayout(pnl_randevuBilgiLayout);
        pnl_randevuBilgiLayout.setHorizontalGroup(
            pnl_randevuBilgiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_randevuBilgiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_randevuBilgiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_randevuBilgiLayout.createSequentialGroup()
                        .addGroup(pnl_randevuBilgiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(pnl_randevuBilgiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbl_appBranch, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                            .addComponent(lbl_appHour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnl_randevuBilgiLayout.createSequentialGroup()
                        .addGroup(pnl_randevuBilgiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnl_randevuBilgiLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(22, 22, 22)
                                .addComponent(lbl_appDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnl_randevuBilgiLayout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbl_docName, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(pnl_randevuBilgiLayout.createSequentialGroup()
                .addComponent(btn_addApp, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pnl_randevuBilgiLayout.setVerticalGroup(
            pnl_randevuBilgiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_randevuBilgiLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(pnl_randevuBilgiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(lbl_docName, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(pnl_randevuBilgiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(lbl_appBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(pnl_randevuBilgiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(lbl_appHour, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(pnl_randevuBilgiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(lbl_appDate, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btn_addApp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btn_availableHours.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_availableHours.setForeground(new java.awt.Color(0, 0, 0));
        btn_availableHours.setText("GET AVAILABLE HOURS");
        btn_availableHours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_availableHoursActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_appinfoLayout = new javax.swing.GroupLayout(pnl_appinfo);
        pnl_appinfo.setLayout(pnl_appinfoLayout);
        pnl_appinfoLayout.setHorizontalGroup(
            pnl_appinfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_appinfoLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_appinfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_availableHours, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                    .addComponent(j_dateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(154, 154, 154)
                .addComponent(pnl_randevuBilgi, javax.swing.GroupLayout.PREFERRED_SIZE, 295, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnl_appinfoLayout.setVerticalGroup(
            pnl_appinfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_appinfoLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(pnl_appinfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(j_dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addComponent(btn_availableHours, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
            .addGroup(pnl_appinfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnl_randevuBilgi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout add_appLayout = new javax.swing.GroupLayout(add_app);
        add_app.setLayout(add_appLayout);
        add_appLayout.setHorizontalGroup(
            add_appLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(add_appLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(add_appLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(add_appLayout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                        .addGap(150, 150, 150)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE))
                    .addComponent(pnl_appinfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, add_appLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(273, 273, 273))
        );
        add_appLayout.setVerticalGroup(
            add_appLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(add_appLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(add_appLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                    .addComponent(jScrollPane7))
                .addGap(18, 18, 18)
                .addComponent(pnl_appinfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab_pane.addTab("NEW APPOINTMENT", add_app);

        appointments.setBackground(new java.awt.Color(170, 255, 255));

        tbl_appointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbl_appointments);

        btn_closeCase.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btn_closeCase.setForeground(new java.awt.Color(0, 0, 0));
        btn_closeCase.setText("CLOSE CASE");
        btn_closeCase.setToolTipText("Hasta Muayenesi Tamamlandiysa Tıklayınız");
        btn_closeCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeCaseActionPerformed(evt);
            }
        });

        btn_prescription.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btn_prescription.setForeground(new java.awt.Color(0, 0, 0));
        btn_prescription.setText("PRESCRIPTION");
        btn_prescription.setToolTipText("Recete Yazmak Icin Tıklayin");
        btn_prescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_prescriptionActionPerformed(evt);
            }
        });

        btn_refreshApps.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btn_refreshApps.setForeground(new java.awt.Color(0, 0, 0));
        btn_refreshApps.setText("REFRESH");
        btn_refreshApps.setToolTipText("Hasta Muayenesi Tamamlandiysa Tıklayınız");
        btn_refreshApps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshAppsActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Appointments");

        btn_newTest.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_newTest.setForeground(new java.awt.Color(0, 0, 0));
        btn_newTest.setText("TEST");
        btn_newTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_newTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout appointmentsLayout = new javax.swing.GroupLayout(appointments);
        appointments.setLayout(appointmentsLayout);
        appointmentsLayout.setHorizontalGroup(
            appointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appointmentsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(appointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(appointmentsLayout.createSequentialGroup()
                        .addComponent(btn_closeCase, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(btn_refreshApps, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(btn_prescription, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(btn_newTest, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appointmentsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(258, 258, 258))
        );
        appointmentsLayout.setVerticalGroup(
            appointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appointmentsLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(appointmentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_closeCase, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_refreshApps, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_prescription, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_newTest, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tab_pane.addTab("APPOINTMENTS", appointments);

        add_whours.setBackground(new java.awt.Color(170, 255, 255));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("CHOOSE WORKING HOURS");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("DATE:");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("TIME :");

        workHoursList.setBackground(new java.awt.Color(100, 176, 235));
        workHoursList.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 43, 45)), "Working Hours", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        workHoursList.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        workHoursList.setForeground(new java.awt.Color(0, 0, 0));
        workHoursList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "9.00", "9.15", "9.30", "9.45", "10.00", "10.15", "10.30", "10.45", "11.00", "11.15", "11.30", "11.45", "12.00", "13.00", "13.15", "13.30", "13.45", "14.00", "14.15", "14.30", "14.45", "15.00", "15.15", "15.30", "15.45" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        workHoursList.setPreferredSize(new java.awt.Dimension(260, 520));
        jScrollPane5.setViewportView(workHoursList);

        btn_addWorkHour.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btn_addWorkHour.setForeground(new java.awt.Color(0, 0, 0));
        btn_addWorkHour.setText("ADD WORKING HOUR");
        btn_addWorkHour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addWorkHourActionPerformed(evt);
            }
        });

        btn_deleteWhour.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btn_deleteWhour.setForeground(new java.awt.Color(0, 0, 0));
        btn_deleteWhour.setText("DELETE WORKING HOUR");
        btn_deleteWhour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteWhourActionPerformed(evt);
            }
        });

        tbl_workhours.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tbl_workhours);

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Work Hours List");

        btn_refreshWlist.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        btn_refreshWlist.setForeground(new java.awt.Color(0, 0, 0));
        btn_refreshWlist.setText("REFRESH");
        btn_refreshWlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshWlistActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout add_whoursLayout = new javax.swing.GroupLayout(add_whours);
        add_whours.setLayout(add_whoursLayout);
        add_whoursLayout.setHorizontalGroup(
            add_whoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(add_whoursLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(add_whoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(add_whoursLayout.createSequentialGroup()
                        .addGroup(add_whoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(add_whoursLayout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                                .addGap(32, 32, 32)
                                .addGroup(add_whoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btn_deleteWhour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn_refreshWlist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46))
                    .addGroup(add_whoursLayout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(add_whoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(add_whoursLayout.createSequentialGroup()
                                .addComponent(date_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(67, 67, 67)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btn_addWorkHour, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73))))
            .addGroup(add_whoursLayout.createSequentialGroup()
                .addGap(221, 221, 221)
                .addComponent(jLabel13)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, add_whoursLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(201, 201, 201))
        );
        add_whoursLayout.setVerticalGroup(
            add_whoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(add_whoursLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(add_whoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(add_whoursLayout.createSequentialGroup()
                        .addGroup(add_whoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(date_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(76, 76, 76)
                        .addComponent(btn_addWorkHour, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGroup(add_whoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(add_whoursLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(add_whoursLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(btn_deleteWhour, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_refreshWlist, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(64, 64, 64))))
        );

        tab_pane.addTab("WORKING HOURS", add_whours);

        tab_test.setBackground(new java.awt.Color(170, 255, 255));

        btn_saveTest.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_saveTest.setForeground(new java.awt.Color(0, 0, 0));
        btn_saveTest.setText("SAVE TEST");
        btn_saveTest.setToolTipText("Click to save as txt folder");
        btn_saveTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveTestActionPerformed(evt);
            }
        });

        btn_inspectTest.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_inspectTest.setForeground(new java.awt.Color(0, 0, 0));
        btn_inspectTest.setText("INSPECT TEST");
        btn_inspectTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_inspectTestActionPerformed(evt);
            }
        });

        btn_testRefresh.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_testRefresh.setForeground(new java.awt.Color(0, 0, 0));
        btn_testRefresh.setText("REFRESH");
        btn_testRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_testRefreshActionPerformed(evt);
            }
        });

        tbl_docTests.setForeground(new java.awt.Color(0, 0, 0));
        tbl_docTests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tbl_docTests);

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("TESTS");

        btn_updateTest.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_updateTest.setForeground(new java.awt.Color(0, 0, 0));
        btn_updateTest.setText("UPDATE TEST");
        btn_updateTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tab_testLayout = new javax.swing.GroupLayout(tab_test);
        tab_test.setLayout(tab_testLayout);
        tab_testLayout.setHorizontalGroup(
            tab_testLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_testLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab_testLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
                    .addGroup(tab_testLayout.createSequentialGroup()
                        .addComponent(btn_testRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(btn_inspectTest, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(btn_updateTest, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_saveTest, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_testLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(333, 333, 333))
        );
        tab_testLayout.setVerticalGroup(
            tab_testLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_testLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tab_testLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_testLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btn_inspectTest, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(tab_testLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_updateTest, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_saveTest, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btn_testRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        tab_pane.addTab("TESTS", tab_test);

        tab_prescriptions.setBackground(new java.awt.Color(170, 255, 255));

        tbl_docPrescripts.setForeground(new java.awt.Color(0, 0, 0));
        tbl_docPrescripts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(tbl_docPrescripts);

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("PRESCRIPTIONS");

        btn_refreshPrescription.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_refreshPrescription.setForeground(new java.awt.Color(0, 0, 0));
        btn_refreshPrescription.setText("REFRESH");
        btn_refreshPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshPrescriptionActionPerformed(evt);
            }
        });

        btn_inspectPrescription.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_inspectPrescription.setForeground(new java.awt.Color(0, 0, 0));
        btn_inspectPrescription.setText("INSPECT");
        btn_inspectPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_inspectPrescriptionActionPerformed(evt);
            }
        });

        btn_savePrescription.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btn_savePrescription.setForeground(new java.awt.Color(0, 0, 0));
        btn_savePrescription.setText("SAVE");
        btn_savePrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_savePrescriptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tab_prescriptionsLayout = new javax.swing.GroupLayout(tab_prescriptions);
        tab_prescriptions.setLayout(tab_prescriptionsLayout);
        tab_prescriptionsLayout.setHorizontalGroup(
            tab_prescriptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_prescriptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab_prescriptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(tab_prescriptionsLayout.createSequentialGroup()
                        .addComponent(btn_refreshPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 136, Short.MAX_VALUE)
                        .addComponent(btn_inspectPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 136, Short.MAX_VALUE)
                        .addComponent(btn_savePrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_prescriptionsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(269, 269, 269))
        );
        tab_prescriptionsLayout.setVerticalGroup(
            tab_prescriptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_prescriptionsLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addGroup(tab_prescriptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_refreshPrescription, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_inspectPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_savePrescription, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tab_pane.addTab("PRESCRIPTIONS", tab_prescriptions);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tab_pane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doctor_informations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(doctor_informations, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(tab_pane, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        jMenuBar1.setForeground(new java.awt.Color(100, 176, 235));

        menu_changecolor.setForeground(new java.awt.Color(0, 0, 0));
        menu_changecolor.setText("SETTINGS");
        menu_changecolor.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        menu_close.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_close.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        menu_close.setForeground(new java.awt.Color(0, 0, 0));
        menu_close.setText("CLOSE");
        menu_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_closeActionPerformed(evt);
            }
        });
        menu_changecolor.add(menu_close);

        menu_color.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_color.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        menu_color.setForeground(new java.awt.Color(0, 0, 0));
        menu_color.setText("Change Background Color");
        menu_color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_colorActionPerformed(evt);
            }
        });
        menu_changecolor.add(menu_color);

        jMenuBar1.add(menu_changecolor);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1050, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void menu_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_closeActionPerformed
        this.dispose();
    }//GEN-LAST:event_menu_closeActionPerformed

    // I can inspect prescription of a patient whose I want(And opens a new frame).
    private void btn_inspectPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_inspectPrescriptionActionPerformed

        if (tbl_docPrescripts.getSelectedRow() != -1) {
            int testID = (int) tbl_docPrescripts.getValueAt(tbl_docPrescripts.getSelectedRow(), 0);
            PrescriptionGUI prescriptionfrm = new PrescriptionGUI(testID);
            prescriptionfrm.setVisible(true);
        }
    }//GEN-LAST:event_btn_inspectPrescriptionActionPerformed

    private void btn_refreshPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshPrescriptionActionPerformed
        prescriptionModel.setRowCount(0);
        presCriptList();
    }//GEN-LAST:event_btn_refreshPrescriptionActionPerformed

    private void btn_testRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_testRefreshActionPerformed
        testModel.setRowCount(0);
        testHistory();
    }//GEN-LAST:event_btn_testRefreshActionPerformed
    // I can inspect test of a patient whose I want(Then a new frame opens).
    private void btn_inspectTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_inspectTestActionPerformed
        if (tbl_docTests.getSelectedRow() != -1) {
            Object testID = tbl_docTests.getValueAt(tbl_docTests.getSelectedRow(), 0);
            int testid = (int) testID;
            TestGUI testfrm = new TestGUI(testid);
            testfrm.setVisible(true);
        }
    }//GEN-LAST:event_btn_inspectTestActionPerformed

    // Doctor can add new work hour by clicking this button.
    private void btn_addWorkHourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addWorkHourActionPerformed
        SimpleDateFormat date = new SimpleDateFormat("dd-MM-yyyy");
        if (date_chooser.getDate() == null) {
            JOptionPane.showMessageDialog(rootPane, "Please choose date.", "Date Selection", JOptionPane.ERROR_MESSAGE);
        } else if (doctorMain.getTc() == null) {
            JOptionPane.showMessageDialog(rootPane, "Error.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            if (workHoursList.getSelectedIndex() != -1) {
                String workTime = (date.format(date_chooser.getDate()) + " " + workHoursList.getSelectedValue());
                try {
                    // I access to doctor class's methods and I update doctor's workHours.
                    if (doctorMain.addWorkHour(doctorMain.getId(), doctorMain.getName(), doctorMain.getSurname(), workTime)) {
                        System.out.println("add wordk hour -->>" + doctorMain.getName());
                        JOptionPane.showMessageDialog(rootPane, "Work hour was added.", "Added", JOptionPane.INFORMATION_MESSAGE);
                        whour.setRowCount(0);
                        getWhours();
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "You can not select this date.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(DoctorGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please choose working time from the list.", "Error", JOptionPane.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_btn_addWorkHourActionPerformed
    }

    // This method creates new test for a patient.(then Test Frame opens)
    private void btn_newTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_newTestActionPerformed
        int testID = autoIDTest();
        int patientID = 0;
        String patientName = "";

        if (tbl_appointments.getSelectedRow() != -1) {
            patientID = (int) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 1);
            String name = (String) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 4);
            String sur = (String) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 5);
            String status = (String) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 7);
            patientName = name + " " + sur;
            String docname = doctorMain.getName() + " " + doctorMain.getSurname();
            int docID = doctorMain.getId();

            if (status.equals("ACTIVE")) {
                CreateTestGUI ntest = new CreateTestGUI(testID, patientID, docID, patientName, docname);
                ntest.setVisible(true);
                testModel.setRowCount(0);
                testHistory();
            } else {
                JOptionPane.showMessageDialog(rootPane, "This appointment has already been closed.", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }//GEN-LAST:event_btn_newTestActionPerformed

    private void btn_refreshAppsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshAppsActionPerformed
        appointmentModel.setRowCount(0);
        docAppoints();
        patientModel.clear();
        patientList();
    }//GEN-LAST:event_btn_refreshAppsActionPerformed

    // This method creates new prescription for a patient.(then Prescription Frame opens)
    private void btn_prescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_prescriptionActionPerformed

        if (tbl_appointments.getSelectedRow() != -1) {
            int appID = (int) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 0);
            int patientID = (int) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 1);
            String patientName = (String) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 4);
            String surname = (String) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 5);
            String date = (String) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 6);
            String status = (String) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 7);
            int docID = doctorMain.getId();
            String dodcName = doctorMain.getName();
            String docSur = doctorMain.getSurname();
            String branch = doctorMain.getBranch();
            int branchId = doctorMain.getBRANCHID();

            if (status.equals("ACTIVE")) {
                PrescriptionGUI framePresc = new PrescriptionGUI(docID, dodcName + " " + docSur, branch, date, patientID, patientName + " " + surname, branchId, appID);
                framePresc.setVisible(true);
                prescriptionModel.setRowCount(0);
                presCriptList();
            } else {
                JOptionPane.showMessageDialog(rootPane, "This appointment has already been closed.", "Error", JOptionPane.ERROR_MESSAGE);

            }

        }
    }//GEN-LAST:event_btn_prescriptionActionPerformed

    // When you press the close case button doctor can create a new prescription while closing the case in this method.
    private void btn_closeCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeCaseActionPerformed

        if (tbl_appointments.getSelectedRow() != -1) {
            if (tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 7).equals("ACTIVE")) {
                String date = (String) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 6);
                int patientID = (int) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 1);
                int appID = (int) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 0);
                String patientName = (String) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 4);
                String surname = (String) tbl_appointments.getValueAt(tbl_appointments.getSelectedRow(), 5);
                Appointment app = new Appointment();
                boolean control = app.updateStatusAppointment(doctorMain.getId(), date, patientID);

                if (control) {
                    int x = JOptionPane.showConfirmDialog(rootPane, "Do you want to create a new prescription?", "Information", JOptionPane.YES_NO_OPTION);
                    if (x == JOptionPane.YES_OPTION) {
                        //IF DOCTOR WANTS TO CREATE A NEW PRESCRIPTION, AFTER THAT A NEW FRAME OPENS.
                        PrescriptionGUI framePresc = new PrescriptionGUI(doctorMain.getId(), doctorMain.getName() + " " + doctorMain.getSurname(), doctorMain.getBranch(), date, patientID, patientName + " " + surname, doctorMain.getBRANCHID(), appID);
                        framePresc.setVisible(true);
                        appointmentModel.setRowCount(0);
                        docAppoints();
                    } else {
                        appointmentModel.setRowCount(0);
                        docAppoints();
                    }
                } else {
                    JOptionPane.showConfirmDialog(rootPane, "Internal Error", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "This appointment has already been closed.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_btn_closeCaseActionPerformed

    private void btn_availableHoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_availableHoursActionPerformed
        getDocAvailableHours();
    }//GEN-LAST:event_btn_availableHoursActionPerformed

    //DOCTOR CAN ADD NEW APPOINTMENTS FOR IT'S PATIENTS IN THIS METHOD. 
    private void btn_addAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addAppActionPerformed
        boolean control = Appcontrol();
        if (control) {
            int key = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to create a new appointment?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (key == JOptionPane.YES_OPTION) {
                int patientid = getPatientId();
                String appDate = getAppDate();
                boolean appAdded = doctorMain.addAppointment(doctorMain.getBRANCHID(), doctorMain.getId(), patientid, doctorMain.getName(), doctorMain.getSurname(), appDate, doctorMain.getBranch());
                if (appAdded) {
                    doctorMain.updateWorkHour(doctorMain.getId(), appDate);
                    JOptionPane.showMessageDialog(rootPane, "Appointment was created, you have to be in hospital before appointment time.", "Appointment Created", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Internal error, please try again later", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Appointment was cancelled", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please choose appointment date and patient.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_addAppActionPerformed

    //THIS METHOD LISTS DORCTOR'S AVAILABLE HOURS.
    private void lst_availableHoursValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lst_availableHoursValueChanged
        lbl_docName.setText(doctorMain.getName() + " " + doctorMain.getSurname());
        lbl_appBranch.setText(doctorMain.getBranch());
        lbl_appHour.setText(getAppHour());
        lbl_appDate.setText(getappointmentDate());
    }//GEN-LAST:event_lst_availableHoursValueChanged

    //DOCTOR CAN UPDATE A TEST.
    private void btn_updateTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateTestActionPerformed
        if (tbl_docTests.getSelectedRow() != -1) {
            Object testID = tbl_docTests.getValueAt(tbl_docTests.getSelectedRow(), 0);
            int testid = (int) testID;
            CreateTestGUI testfrm2 = new CreateTestGUI(testid);
            testfrm2.setVisible(true);
        }
    }//GEN-LAST:event_btn_updateTestActionPerformed

    // DOCTOR CAN SAVE THE TESTS AS PDF FILE.
    private void btn_saveTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveTestActionPerformed

        if (tbl_docTests.getRowCount() > 0) {
            String path = "";
            JFileChooser f = new JFileChooser(); // I USE FILE CHOOSER TO TAKE THE PATH.
            f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int x = f.showSaveDialog(tab_test);
            if (x == JFileChooser.APPROVE_OPTION) {
                path = f.getSelectedFile().getPath();
                Document document = new Document();
                try {

                    String name = JOptionPane.showInputDialog(rootPane, "Please enter name for file.", "File Name", JOptionPane.INFORMATION_MESSAGE);
                    while (name == null) {
                        name = JOptionPane.showInputDialog(rootPane, "Please enter a valid file name.", "File Name", JOptionPane.INFORMATION_MESSAGE);

                    }
                    // WHEN I TAKE THE PATH, I CAN CREATE THE FILE TO THIS PATH.
                    PdfWriter.getInstance(document, new FileOutputStream(path + name + ".pdf"));

                } catch (DocumentException | FileNotFoundException ex) {
                    Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                document.open();

                // I PUT TRY CATCH TO HANDLING EXCEPTIONS.
                try {
                    document.add(new Paragraph("                                                                TESTS \n "));
                } catch (DocumentException ex) {
                    Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

                // I CREATED PDFTABLE.
                PdfPTable tbl = new PdfPTable(5);
                tbl.addCell("ID");
                tbl.addCell("DOCTOR NAME");
                tbl.addCell("PATIENT NAME");
                tbl.addCell("BRANCH");
                tbl.addCell("DATE");

                for (int i = 0; i < tbl_docTests.getRowCount(); i++) {
                    String id = tbl_docTests.getValueAt(i, 0).toString();
                    String docname = tbl_docTests.getValueAt(i, 1).toString();
                    String patname = tbl_docTests.getValueAt(i, 2).toString();
                    String branch = tbl_docTests.getValueAt(i, 3).toString();
                    String date = tbl_docTests.getValueAt(i, 4).toString();

                    //I ADD INFORMATIONS INTO PDFTABLE'S CELLS.
                    tbl.addCell(id);
                    tbl.addCell(docname);
                    tbl.addCell(patname);
                    tbl.addCell(branch);
                    tbl.addCell(date);
                }
                try {
                    document.add(tbl);

                    JOptionPane.showMessageDialog(rootPane, "Report was saved as pdf.", "SAVED", JOptionPane.WARNING_MESSAGE);
                } catch (DocumentException ex) {
                    Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

                document.close();

            } else {

            }

        } else {

            JOptionPane.showMessageDialog(rootPane, "There is no TEST.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_saveTestActionPerformed

    // DOCTOR CAN SAVE THE PRESCRIPTIONS AS PDF FILE.
    private void btn_savePrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_savePrescriptionActionPerformed

        if (tbl_docPrescripts.getRowCount() > 0) {
            String path = "";
            JFileChooser f = new JFileChooser();
            f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int x = f.showSaveDialog(tab_test);
            if (x == JFileChooser.APPROVE_OPTION) {
                path = f.getSelectedFile().getPath();
                Document document = new Document();
                try {

                    String name = JOptionPane.showInputDialog(rootPane, "Please enter name for file.", "File Name", JOptionPane.INFORMATION_MESSAGE);
                    while (name == null) {
                        name = JOptionPane.showInputDialog(rootPane, "Please enter a valid file name.", "File Name", JOptionPane.INFORMATION_MESSAGE);

                    }
                    PdfWriter.getInstance(document, new FileOutputStream(path + name + ".pdf"));

                } catch (DocumentException | FileNotFoundException ex) {
                    Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                document.open();
                try {
                    document.add(new Paragraph("                                                                PRESCRIPTIONS \n "));
                } catch (DocumentException ex) {
                    Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                PdfPTable tbl = new PdfPTable(5);
                tbl.addCell("ID");
                tbl.addCell("DOCTOR NAME");
                tbl.addCell("PATIENT NAME");
                tbl.addCell("BRANCH");
                tbl.addCell("DATE");

                for (int i = 0; i < tbl_docPrescripts.getRowCount(); i++) {
                    String id = tbl_docPrescripts.getValueAt(i, 0).toString();
                    String docname = tbl_docPrescripts.getValueAt(i, 1).toString();
                    String patname = tbl_docPrescripts.getValueAt(i, 2).toString();
                    String branch = tbl_docPrescripts.getValueAt(i, 3).toString();
                    String date = tbl_docPrescripts.getValueAt(i, 4).toString();
                    tbl.addCell(id);
                    tbl.addCell(docname);
                    tbl.addCell(patname);
                    tbl.addCell(branch);
                    tbl.addCell(date);
                }
                try {
                    document.add(tbl);

                    JOptionPane.showMessageDialog(rootPane, "Report was saved as pdf.", "SAVED", JOptionPane.WARNING_MESSAGE);
                } catch (DocumentException ex) {
                    Logger.getLogger(PharmacyGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

                document.close();

            } else {

            }

        } else {

            JOptionPane.showMessageDialog(rootPane, "There is no prescription.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_savePrescriptionActionPerformed

    //DOCTOR CAN DELETE WORKHOURS IF DOCTOR WANTED.
    private void btn_deleteWhourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteWhourActionPerformed

        if (tbl_workhours.getSelectedRow() != -1 && tbl_workhours.getRowCount() > 0) {
            int id = (int) tbl_workhours.getValueAt(tbl_workhours.getSelectedRow(), 0);
            int docid = doctorMain.getId();
            String date = (String) tbl_workhours.getValueAt(tbl_workhours.getSelectedRow(), 3);

            try {
                boolean control = doctorMain.deleteWhour(id, docid, date);
                if (control) {
                    JOptionPane.showMessageDialog(rootPane, "Working hour was deleted.", "Successfull", JOptionPane.INFORMATION_MESSAGE);
                    whour.setRowCount(0);
                    getWhours();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (SQLException ex) {
                Logger.getLogger(DoctorGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btn_deleteWhourActionPerformed

    private void btn_refreshWlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshWlistActionPerformed
        whour.setRowCount(0);
        getWhours();
    }//GEN-LAST:event_btn_refreshWlistActionPerformed

    //THIS METHOD CHANGE THE COLOR OF THE PANELS.
    private void menu_colorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_colorActionPerformed
        Color firstCol = new Color(170, 255, 255);
        // I USED COLOR CHOOSER TO TAKE COLOR FROM USER
        Color color = JColorChooser.showDialog(this, "Choose Bacground Color", Color.BLACK);
        if (color == null) {
            add_app.setBackground(firstCol);
            appointments.setBackground(firstCol);
            add_whours.setBackground(firstCol);
            tab_test.setBackground(firstCol);
            tab_prescriptions.setBackground(firstCol);
            pnl_appinfo.setBackground(firstCol);
        } else {
            add_app.setBackground(color);
            appointments.setBackground(color);
            add_whours.setBackground(color);
            tab_test.setBackground(color);
            tab_prescriptions.setBackground(color);
            pnl_appinfo.setBackground(color);
        }
    }//GEN-LAST:event_menu_colorActionPerformed

    //THIS METHOD DISPLAYS DOCTOR INFORMATIONS IN RIGHT PANEL.
    public void showDocInfos() {
        try {
            System.out.println(doctorMain.getTc());
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            pst = conn.prepareStatement("SELECT * FROM DOCTORS WHERE TCNO = ?");
            pst.setString(1, doctorMain.getTc());
            rs = pst.executeQuery();
            if (rs.next()) {
                String name = rs.getString("NAME");
                String surname = rs.getString("SURNAME");
                String phone = rs.getString("PHONE");
                String placebirth = rs.getString("PLACEBIRTH");
                String datebirth = rs.getString("BIRTHDATE");
                lbl_name.setText(name.toUpperCase().toUpperCase());
                lbl_surname.setText(surname.toUpperCase());
                lbl_phone.setText(phone);
                lbl_placebirth.setText(placebirth.toUpperCase());
                lbl_datebirth.setText(datebirth);
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(DoctorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(DoctorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //THIS METHOD LISTS DOCTOR's APPOINTMENTS IN TABLE.
    public void docAppoints() {
        Appointment app = new Appointment();
        ArrayList<Appointment> appList = new ArrayList<>();
        appList = app.getDocAppointments(doctorMain.getId());
        for (int i = 0; i < appList.size(); i++) {
            if (appList.get(i) != null) {
                int id = appList.get(i).getId();
                String clinic = appList.get(i).getBranch();
                int docID = appList.get(i).getDoctorID();
                String patName = appList.get(i).getPatientName();
                String date = appList.get(i).getApp_date();
                int patientID = appList.get(i).getPatientID();
                String patSurname = appList.get(i).getPatientSurname();
                String status = appList.get(i).getStatus();
                appointmentModel.addRow(new Object[]{id, patientID, clinic, docID, patName, patSurname, date, status});

            }
        }

    }

    //THIS METHOD LISTS DOCTO'S  TEST HISTORY IN TABLE.
    private void testHistory() {
        ArrayList<Test> testList = new ArrayList<>();
        Test test = new Test();
        testList = test.getDocTests(doctorMain.getId());
        for (int i = 0; i < testList.size(); i++) {
            if (testList.get(i) != null) {
                int id = testList.get(i).getId();
                String patientName = testList.get(i).getPatientName();
                String docName = testList.get(i).getDocName();
                String type = testList.get(i).getTestType();
                String testDate = testList.get(i).getTestDate();
                String resultDate = testList.get(i).getResultDate();
                String cost = testList.get(i).getPrice();
                testModel.addRow(new Object[]{id, docName, patientName, type, testDate, resultDate, cost});
            }

        }

    }

    //THIS METHOD LISTS DOCTOR'S PATIENTS IN TABLE.
    private void patientList() {
        Appointment app = new Appointment();
        ArrayList<Appointment> appList = new ArrayList<>();
        appList = app.getDocAppointments(doctorMain.getId());
        for (int i = 0; i < appList.size(); i++) {
            if (appList.get(i) != null) {
                String patName = appList.get(i).getPatientName();
                String patSurname = appList.get(i).getPatientSurname();
                int patientID = appList.get(i).getPatientID();
                String patID = Integer.toString(patientID);
                patientModel.addElement(patID + "- " + patName + " " + patSurname);
            }
        }
    }

    //THIS METHOD LISTS DOCTOR'S AVAILABLE HOURS.
    private void getDocAvailableHours() {
        AvalilableHoursModel.removeAllElements();
        SimpleDateFormat date = new SimpleDateFormat("dd-MM-yyyy");
        if (j_dateChooser.getDate() == null) {
            JOptionPane.showMessageDialog(rootPane, "Please choose appointment date.", "Date must not be empty", JOptionPane.ERROR_MESSAGE);
        } else {
            String appDate = date.format(j_dateChooser.getDate());
            ArrayList<String> avaliableHourList = new ArrayList<>();
            avaliableHourList = doctorMain.getAvailableHours(doctorMain.getId(), appDate);

            for (int j = 0; j < avaliableHourList.size(); j++) {
                if (avaliableHourList.get(j) != null) {
                    appDate = avaliableHourList.get(j);
                    AvalilableHoursModel.addElement(appDate);
                }
            }
        }

    }

    //THIS METHOD LISTS DOCTOR'S PRESCRIPTIONS IN TABLE.
    private void presCriptList() {
        ArrayList<Prescription> prescripts = new ArrayList<>();
        Prescription prescription = new Prescription();
        prescripts = prescription.getDocPrescriptions(doctorMain.getId());
        for (int i = 0; i < prescripts.size(); i++) {
            if (prescripts.get(i) != null) {
                int id = prescripts.get(i).getId();
                String patientName = prescripts.get(i).getPatientName();
                String docName = prescripts.get(i).getDocName();
                String branch = prescripts.get(i).getBranch();
                String date = prescripts.get(i).getDate();
                prescriptionModel.addRow(new Object[]{id, docName, patientName, branch, date});
            }
        }

    }

    public int getPatientId() {
        int id = 0;
        if (lst_appPatients.getSelectedIndex() != -1) {
            String[] word = lst_appPatients.getSelectedValue().split("-");
            if (word[0] != null) {
                id = Integer.parseInt(word[0]);
                return id;
            }
        }
        return id;
    }

    public String getappointmentDate() {
        String realdate = "";
        if (lst_availableHours.getSelectedIndex() != -1) {
            String[] hour;
            String date = lst_availableHours.getSelectedValue();
            hour = date.split(" ");
            if (hour[0] != null) {

                realdate = hour[0];
            }
            return realdate;
        }
        return realdate;
    }

    public String getAppHour() {
        String realhour = "";
        if (lst_availableHours.getSelectedIndex() != -1) {
            String[] hour;
            String date = lst_availableHours.getSelectedValue();
            hour = date.split(" ");
            if (hour[1] != null) {

                realhour = hour[1];
            }
            return realhour;
        }
        return realhour;
    }

    public String getAppDate() {
        String date = "";

        if (lst_availableHours.getSelectedIndex() != -1) {
            date = lst_availableHours.getSelectedValue();
            return date;
        }
        return date;

    }

    public boolean Appcontrol() {

        if (lst_appPatients.getSelectedIndex() == -1) {
            return false;
        } else if (lst_availableHours.getSelectedIndex() == -1) {
            return false;
        } else {
            return true;
        }

    }

    //this method assign ID's tests automatically.
    public int autoIDTest() {
        int id = 0;
        conn = null;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            Statement stm = conn.createStatement();
            rs = stm.executeQuery("SELECT MAX(ID) FROM TEST");
            rs.next();
            rs.getInt(1);
            if (rs.getInt(1) == 0) {
                id = 1;
                return id;
            } else {
                id = (rs.getInt(1));
                id++;
                return id;
            }

        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();

            }

        } catch (SQLException ex) {
            Logger.getLogger(Patient.class.getName()).log(Level.SEVERE, null, ex);
        }

        return id;

    }

    //THIS METHOD LISTS DOCTOR'S WORK HOURS IN TABLE.
    public void getWhours() {
        whour.setRowCount(0);
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/HastaneYonetimSistemi", "sa", "as");
            pst = conn.prepareStatement("SELECT * FROM WORKHOURS WHERE DOCTORID = ? AND STATUS = ? ");
            pst.setInt(1, doctorMain.getId());
            pst.setString(2, "PASSIVE");
            rs = pst.executeQuery();
            while (rs.next()) {
                int id = (rs.getInt("ID"));
                String date = (rs.getString("DATE"));
                whour.addRow(new Object[]{id, doctorMain.getId(), "PASSIVE", date});

            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(DoctorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(DoctorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel add_app;
    private javax.swing.JPanel add_whours;
    private javax.swing.JPanel appointments;
    private javax.swing.JButton btn_addApp;
    private javax.swing.JButton btn_addWorkHour;
    private javax.swing.JButton btn_availableHours;
    private javax.swing.JButton btn_closeCase;
    private javax.swing.JButton btn_deleteWhour;
    private javax.swing.JButton btn_inspectPrescription;
    private javax.swing.JButton btn_inspectTest;
    private javax.swing.JButton btn_newTest;
    private javax.swing.JButton btn_prescription;
    private javax.swing.JButton btn_refreshApps;
    private javax.swing.JButton btn_refreshPrescription;
    private javax.swing.JButton btn_refreshWlist;
    private javax.swing.JButton btn_savePrescription;
    private javax.swing.JButton btn_saveTest;
    private javax.swing.JButton btn_testRefresh;
    private javax.swing.JButton btn_updateTest;
    private com.toedter.calendar.JDateChooser date_chooser;
    private javax.swing.JPanel doctor_informations;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator7;
    private com.toedter.calendar.JDateChooser j_dateChooser;
    private javax.swing.JLabel lbl_appBranch;
    private javax.swing.JLabel lbl_appDate;
    private javax.swing.JLabel lbl_appHour;
    private javax.swing.JLabel lbl_datebirth;
    private javax.swing.JLabel lbl_docName;
    private javax.swing.JLabel lbl_isim1;
    private javax.swing.JLabel lbl_isim2;
    private javax.swing.JLabel lbl_isim4;
    private javax.swing.JLabel lbl_isim5;
    private javax.swing.JLabel lbl_isim6;
    private javax.swing.JLabel lbl_name;
    private javax.swing.JLabel lbl_phone;
    private javax.swing.JLabel lbl_placebirth;
    private javax.swing.JLabel lbl_surname;
    private javax.swing.JList<String> lst_appPatients;
    private javax.swing.JList<String> lst_availableHours;
    private javax.swing.JMenu menu_changecolor;
    private javax.swing.JMenuItem menu_close;
    private javax.swing.JMenuItem menu_color;
    private javax.swing.JPanel pnl_appinfo;
    private javax.swing.JPanel pnl_randevuBilgi;
    private javax.swing.JTabbedPane tab_pane;
    private javax.swing.JPanel tab_prescriptions;
    private javax.swing.JPanel tab_test;
    private javax.swing.JTable tbl_appointments;
    private javax.swing.JTable tbl_docPrescripts;
    private javax.swing.JTable tbl_docTests;
    private javax.swing.JTable tbl_workhours;
    private javax.swing.JList<String> workHoursList;
    // End of variables declaration//GEN-END:variables
}
